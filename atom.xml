<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Horace</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.zhaohaihao.com/"/>
  <updated>2020-04-07T03:29:00.592Z</updated>
  <id>https://www.zhaohaihao.com/</id>
  
  <author>
    <name>Horace</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式之行为型-状态模式 (State)</title>
    <link href="https://www.zhaohaihao.com/posts/2020030304.html"/>
    <id>https://www.zhaohaihao.com/posts/2020030304.html</id>
    <published>2020-03-03T14:34:57.000Z</published>
    <updated>2020-04-07T03:29:00.592Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/124-State" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>当一个对象的内在状态改变时允许改变其行为。</p></blockquote><p>状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂的情况。可以将状态的判断逻辑转移到表示不同状态的一系列类当中，从而简化复杂的判断逻辑。</p><h1 id="三个角色"><a href="#三个角色" class="headerlink" title="三个角色"></a>三个角色</h1><p>状态模式主要有以下三个角色：</p><ul><li><strong>环境类Context</strong>：也叫做上下文，维护一个当前状态，并将与状态相关的操作委托给当前状态对象来处理。</li><li><strong>抽象状态类State</strong>：定义一个接口用来封装环境对象中特定状态相关的行为。</li><li><strong>具体状态类Concrete State</strong>：实现抽象状态类对应的行为。</li></ul><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>笔者这里以开关灯为例，主要有开、关两种状态。</p><h2 id="创建抽象状态类"><a href="#创建抽象状态类" class="headerlink" title="创建抽象状态类"></a>创建抽象状态类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 电灯状态类(抽象状态类)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 22:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ElectricLightState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ElectricLightContext electricLightContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setElectricLightContext</span><span class="params">(ElectricLightContext electricLightContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.electricLightContext = electricLightContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开灯</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">turnOn</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关灯</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">turnOff</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getState</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建具体状态类"><a href="#创建具体状态类" class="headerlink" title="创建具体状态类"></a>创建具体状态类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 打开状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 22:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurnOnState</span> <span class="keyword">extends</span> <span class="title">ElectricLightState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"操作错误, 当前电灯状态已经是打开状态"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.electricLightContext.setElectricLightState(ElectricLightContext.TURN_OFF_STATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"打开状态"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 关闭状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 22:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurnOffState</span> <span class="keyword">extends</span> <span class="title">ElectricLightState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.electricLightContext.setElectricLightState(ElectricLightContext.TURN_ON_STATE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"操作错误, 当前电灯状态已经是关闭状态"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"关闭状态"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建环境类"><a href="#创建环境类" class="headerlink" title="创建环境类"></a>创建环境类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 电灯环境类(环境类)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 22:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElectricLightContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ElectricLightState electricLightState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> TurnOnState TURN_ON_STATE = <span class="keyword">new</span> TurnOnState();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> TurnOffState TURN_OFF_STATE = <span class="keyword">new</span> TurnOffState();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ElectricLightState <span class="title">getElectricLightState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> electricLightState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setElectricLightState</span><span class="params">(ElectricLightState electricLightState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.electricLightState = electricLightState;</span><br><span class="line">        <span class="comment">// 将当前的环境通知到各个状态实现类</span></span><br><span class="line">        <span class="keyword">this</span>.electricLightState.setElectricLightContext(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.electricLightState.turnOn();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnOff</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.electricLightState.turnOff();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里维护一个当前状态对象，并将 <code>turnOff()</code> 、 <code>turnOn()</code> 这些与状态相关的操作委托给当前的状态对象来进行处理。</p><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 22:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ElectricLightContext electricLightContext = <span class="keyword">new</span> ElectricLightContext();</span><br><span class="line">        electricLightContext.setElectricLightState(<span class="keyword">new</span> TurnOnState());</span><br><span class="line">        System.out.println(String.format(<span class="string">"当前电灯的状态: [%s]"</span>, electricLightContext.getElectricLightState().getState()));</span><br><span class="line">        electricLightContext.turnOn();</span><br><span class="line"></span><br><span class="line">        electricLightContext.turnOff();</span><br><span class="line">        System.out.println(String.format(<span class="string">"当前电灯的状态: [%s]"</span>, electricLightContext.getElectricLightState().getState()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>当前电灯的状态: [打开状态]<br>操作错误, 当前电灯状态已经是打开状态<br>当前电灯的状态: [关闭状态]</p></blockquote><h2 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/state/state01.png?x-oss-process=style/style01" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时。</li><li>业务场景中有多个状态，且这些状态的变化都需要依靠大量的多分支判断语句来实现。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>将与特定状态相关的行为局部化，并且将不同状态的行为分割开来。</li><li>易扩展。通过定义新的子类可以很容易增加新的状态和转换。</li><li>通过把各种状态转移逻辑分布到State的子类之间，来减少相互间的依赖。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>在状态多的业务场景当中使用，会导致类数目的增加，使系统变得复杂。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://www.runoob.com/design-pattern/state-pattern.html" target="_blank" rel="noopener">菜鸟教程-状态模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之行为型-访问者模式 (Visitor)</title>
    <link href="https://www.zhaohaihao.com/posts/2020030303.html"/>
    <id>https://www.zhaohaihao.com/posts/2020030303.html</id>
    <published>2020-03-03T07:48:05.000Z</published>
    <updated>2020-04-07T03:29:42.132Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/123-Visitor" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>封装一些施加于某种数据结构元素之上的操作。一旦这些操作需要修改，接受这个操作的数据结构可以保持不变。</p></blockquote><p>访问者模式适用于数据结构相对稳定的系统，它把数据结构和作用于数据结构上的操作之间的耦合解脱开，使得操作集合可以相对自由的演化。</p><p>访问者模式的核心就是根据不同的访问者对相同的数据产生不同的操作行为。</p><h1 id="五个角色"><a href="#五个角色" class="headerlink" title="五个角色"></a>五个角色</h1><p>访问者模式主要包含以下五个角色：</p><ul><li><strong>抽象访问者类Visitor</strong>：为对象结构中的每一个具体元素类提供一个访问操作。</li><li><strong>具体访问者类Concrete Visitor</strong>：实现抽象访问者中声明的各个方法。</li><li><strong>抽象元素类Element</strong>：定义一个接受操作，以被接受的访问者对象作为其参数。</li><li><strong>具体元素类Concrete Element</strong>：实现抽象元素类的接受操作。</li><li><strong>对象结构类Object Structure</strong>：是一个包含元素角色的容器，能够遍历其内部的元素，同时提供一个高层的接口以允许访问者访问它的元素。</li></ul><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>笔者这里以用户访问<a href="https://blog.csdn.net/Dh_Chao" target="_blank" rel="noopener">笔者CSDN博客</a>为例。</p><p>笔者这里将用户分为匿名用户(非注册用户)和CSDN用户(注册用户)两种，即不同的访问者。</p><p>博客在这里可以当做对象结构，而每篇博文可以是一个具体的元素。</p><h2 id="创建抽象访问者类"><a href="#创建抽象访问者类" class="headerlink" title="创建抽象访问者类"></a>创建抽象访问者类</h2><p>按照要求为对象结构中的每一个具体的元素类提供一个访问操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 抽象访问者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 17:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问文章内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> articleContent 文章内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ArticleContent articleContent)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问资源内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resourceContent 资源内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">visit</span><span class="params">(ResourceContent resourceContent)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建具体访问者类"><a href="#创建具体访问者类" class="headerlink" title="创建具体访问者类"></a>创建具体访问者类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 注册用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 17:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisteredUserVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ArticleContent articleContent)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"CSDN用户访问博客文章[%s]"</span>, articleContent.getName()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ResourceContent resourceContent)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"CSDN用户下载博客资源[%s]"</span>, resourceContent.getName()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 非注册用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 17:06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuestUserVisitor</span> <span class="keyword">implements</span> <span class="title">Visitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ArticleContent articleContent)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"匿名用户访问博客文章[%s]"</span>, articleContent.getName()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visit</span><span class="params">(ResourceContent resourceContent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (resourceContent.isNeedLogin()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"匿名用户无法访问当前资源, 请登录!"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(String.format(<span class="string">"匿名用户下载博客资源[%s]"</span>, resourceContent.getName()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建抽象元素类"><a href="#创建抽象元素类" class="headerlink" title="创建抽象元素类"></a>创建抽象元素类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 内容类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 17:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Content</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Content</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受操作, 核心方法, 接受访问者访问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> visitor 访问者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitior visitor)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建具体元素类"><a href="#创建具体元素类" class="headerlink" title="创建具体元素类"></a>创建具体元素类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 文章内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 17:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleContent</span> <span class="keyword">extends</span> <span class="title">Content</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArticleContent</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 资源内容</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 17:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceContent</span> <span class="keyword">extends</span> <span class="title">Content</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否需要登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> needLogin;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ResourceContent</span><span class="params">(String name, <span class="keyword">boolean</span> needLogin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.needLogin = needLogin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNeedLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> needLogin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        visitor.visit(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建对象结构类"><a href="#创建对象结构类" class="headerlink" title="创建对象结构类"></a>创建对象结构类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 博客类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 17:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Content&gt; contentList = <span class="keyword">new</span> ArrayList&lt;Content&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addContent</span><span class="params">(Content content)</span> </span>&#123;</span><br><span class="line">        contentList.add(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeContent</span><span class="params">(Content content)</span> </span>&#123;</span><br><span class="line">        contentList.remove(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接受访问者访问</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> visitor 访问者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Content content : contentList) &#123;</span><br><span class="line">            content.accept(visitor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 17:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建对象结构</span></span><br><span class="line">        Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建具体元素</span></span><br><span class="line">        Content articleContent = <span class="keyword">new</span> ArticleContent(<span class="string">"Java设计模式之行为型-访问者模式 (Visitor)"</span>);</span><br><span class="line">        Content resourceContent = <span class="keyword">new</span> ResourceContent(<span class="string">"代码生成器工具.zip"</span>, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        blog.addContent(articleContent);</span><br><span class="line">        blog.addContent(resourceContent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建不同访问对象</span></span><br><span class="line">        Visitor registeredUserVisitor = <span class="keyword">new</span> RegisteredUserVisitor();</span><br><span class="line">        Visitor guestUserVisitor = <span class="keyword">new</span> GuestUserVisitor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不同对象分别访问数据</span></span><br><span class="line">        blog.accept(registeredUserVisitor);</span><br><span class="line">        blog.accept(guestUserVisitor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>CSDN用户访问博客文章[Java设计模式之行为型-访问者模式 (Visitor)]<br>CSDN用户下载博客资源[代码生成器工具.zip]<br>匿名用户访问博客文章[Java设计模式之行为型-访问者模式 (Visitor)]<br>匿名用户无法访问当前资源, 请登录!</p></blockquote><h2 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/visitor/visitor01.png?x-oss-process=style/style01" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>对象的数据结构相对稳定，但是其操作算法经常发生变化的程序。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>良好的扩展性。能够在不修改对象结构中的元素情况下，为对象结构中的元素添加新功能，也就是增加新的访问者类。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>增加新的数据结构较为困难，具体的元素的变更也较为麻烦。</li><li>破坏了封装性。访问者模式中的具体元素会暴露给访问者。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://zh.wikipedia.org/wiki/%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科-访问者模式</a></li><li><a href="https://www.runoob.com/design-pattern/visitor-pattern.html" target="_blank" rel="noopener">菜鸟教程-访问者模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之行为型-责任链模式 (Chain of Responsibility)</title>
    <link href="https://www.zhaohaihao.com/posts/2020030302.html"/>
    <id>https://www.zhaohaihao.com/posts/2020030302.html</id>
    <published>2020-03-03T01:55:35.000Z</published>
    <updated>2020-04-07T03:29:21.225Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/122-Chain-of-Responsibility" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>使多个对象都有机会去处理请求。从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p></blockquote><p>责任链模式也叫做<strong>职责链模式</strong>。</p><h1 id="三个角色"><a href="#三个角色" class="headerlink" title="三个角色"></a>三个角色</h1><p>责任链模式主要有以下三个角色：</p><ul><li><strong>抽象处理者Handler</strong>：定义一个处理请求的接口，内部包含一个后继处理者的引用。</li><li><strong>具体处理者Concrete Handler</strong>：实现抽象处理者。如果能够处理请求则处理，否则就将该请求转发给它的后继处理者。</li><li><strong>客户端类Client</strong>：创建处理链，同时向链头的具体处理者对象提交请求，它并不关心处理细节和请求的传递过程。</li></ul><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>现在多数公司请假都通过钉钉来走审批流程，不同的公司审批的规则也不同。</p><p>笔者这里以请事假为例，以及以下审批事假规则来简单讲解责任链模式。</p><table><thead><tr><th align="center"><strong>事假天数(最小单位:天)</strong></th><th align="center"><strong>审批人</strong></th></tr></thead><tbody><tr><td align="center">1天</td><td align="center">组长-&gt;人事经理</td></tr><tr><td align="center">1天-7天(包含7天)</td><td align="center">组长-&gt;总监-&gt;人事经理</td></tr><tr><td align="center">7天以上</td><td align="center">组长-&gt;总监-&gt;老板-&gt;人事经理</td></tr></tbody></table><h2 id="创建请求实体类"><a href="#创建请求实体类" class="headerlink" title="创建请求实体类"></a>创建请求实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 事假请求实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 14:50</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonalLeaveRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 申请人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String applicant;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 天数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer days;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String startTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 理由</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String reason;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处忽略getter、setter方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 天数常量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Days</span> </span>&#123;</span><br><span class="line">        Integer ONE = <span class="number">1</span>;</span><br><span class="line">        Integer SEVEN = <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建抽象处理者"><a href="#创建抽象处理者" class="headerlink" title="创建抽象处理者"></a>创建抽象处理者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 审批人</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 14:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Approver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后继审批人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Approver approver;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置后继审批人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> approver 后继审批人</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextApprpver</span><span class="params">(Approver approver)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.approver = approver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 审批</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 事假请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">approve</span><span class="params">(PersonalLeaveRequest request)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建具体处理者"><a href="#创建具体处理者" class="headerlink" title="创建具体处理者"></a>创建具体处理者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 老板</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 15:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BossApprover</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">approve</span><span class="params">(PersonalLeaveRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(request.getReason())) &#123;</span><br><span class="line">            System.out.println(<span class="string">"老板审核结果: 批准"</span>);</span><br><span class="line">            <span class="keyword">if</span> (approver != <span class="keyword">null</span>) &#123;</span><br><span class="line">                approver.approve(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"老板审核结果: 不批准"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 总监</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 15:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InspectorGeneralApprover</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">approve</span><span class="params">(PersonalLeaveRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(request.getReason())) &#123;</span><br><span class="line">            System.out.println(<span class="string">"总监审核结果: 批准"</span>);</span><br><span class="line">            <span class="keyword">if</span> (approver != <span class="keyword">null</span>) &#123;</span><br><span class="line">                approver.approve(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"总监审核结果: 不批准"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 组长</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 15:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupLeaderApprover</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">approve</span><span class="params">(PersonalLeaveRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(request.getReason())) &#123;</span><br><span class="line">            System.out.println(<span class="string">"组长审核结果: 批准"</span>);</span><br><span class="line">            <span class="keyword">if</span> (approver != <span class="keyword">null</span>) &#123;</span><br><span class="line">                approver.approve(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"组长审核结果: 不批准"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 人事经理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 15:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonnelManagerApprover</span> <span class="keyword">extends</span> <span class="title">Approver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">approve</span><span class="params">(PersonalLeaveRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(request.getReason())) &#123;</span><br><span class="line">            System.out.println(<span class="string">"人事经理审核结果: 批准"</span>);</span><br><span class="line">            <span class="keyword">if</span> (approver != <span class="keyword">null</span>) &#123;</span><br><span class="line">                approver.approve(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"人事经理审核结果: 不批准"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意一下，在每个具体的处理类当中 <code>if (approver != null) {}</code> 这个判断是否存在后继处理者引用的分支是必须存在的。</p><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><p>这里的测试类也可以作为我们的客户端类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 15:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PersonalLeaveRequest request = <span class="keyword">new</span> PersonalLeaveRequest();</span><br><span class="line">        request.setApplicant(<span class="string">"海豪"</span>);</span><br><span class="line">        request.setDays(<span class="number">6</span>);</span><br><span class="line">        request.setStartTime(<span class="string">"2020年03月03日15:24:37"</span>);</span><br><span class="line">        request.setReason(<span class="string">"家中有事"</span>);</span><br><span class="line"></span><br><span class="line">        Approver groupLeaderApprover = <span class="keyword">new</span> GroupLeaderApprover();</span><br><span class="line">        Approver personnelManagerApprover = <span class="keyword">new</span> PersonnelManagerApprover();</span><br><span class="line">        Approver inspectorGeneralApprover = <span class="keyword">new</span> InspectorGeneralApprover();</span><br><span class="line">        Approver bossApprover = <span class="keyword">new</span> BossApprover();</span><br><span class="line"></span><br><span class="line">        Integer days = request.getDays();</span><br><span class="line">        <span class="comment">// 审批事假规则</span></span><br><span class="line">        <span class="keyword">if</span> (PersonalLeaveRequest.Days.ONE.equals(days)) &#123;</span><br><span class="line">            <span class="comment">// 事假天数1天</span></span><br><span class="line">            groupLeaderApprover.setNextApprpver(personnelManagerApprover);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days &gt; PersonalLeaveRequest.Days.ONE &amp;&amp; days &lt;= PersonalLeaveRequest.Days.SEVEN) &#123;</span><br><span class="line">            <span class="comment">// 事假天数1天-7天(包含7天)</span></span><br><span class="line">            groupLeaderApprover.setNextApprpver(inspectorGeneralApprover);</span><br><span class="line">            inspectorGeneralApprover.setNextApprpver(personnelManagerApprover);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (days &gt; PersonalLeaveRequest.Days.SEVEN) &#123;</span><br><span class="line">            <span class="comment">// 事假天数7天以上</span></span><br><span class="line">            groupLeaderApprover.setNextApprpver(inspectorGeneralApprover);</span><br><span class="line">            groupLeaderApprover.setNextApprpver(bossApprover);</span><br><span class="line">            bossApprover.setNextApprpver(personnelManagerApprover);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"请假天数异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">        System.out.println(</span><br><span class="line">                String.format(<span class="string">"[%s]发起请假申请, 请假天数[%s]天, 请假开始时间[%s], 请假理由[%s]"</span>, request.getApplicant(), request.getDays(),</span><br><span class="line">                        request.getStartTime(), request.getReason()));</span><br><span class="line">        System.out.println(<span class="string">"&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"审核结果如下:"</span>);</span><br><span class="line">        groupLeaderApprover.approve(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>&gt;&gt;&gt;&gt;<br>[海豪]发起请假申请, 请假天数[6]天, 请假开始时间[2020年03月03日15:24:37], 请假理由[家中有事]<br>&lt;&lt;&lt;&lt;<br>审核结果如下:<br>组长审核结果: 批准<br>总监审核结果: 批准<br>人事经理审核结果: 批准</p></blockquote><h2 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/chain-of-responsibility/chain-of-responsibility01.png?x-oss-process=style/style01" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>一个请求的处理需要多个对象当中的一个或者几个协作处理。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>降低对象之间的耦合度。对请求的发送者和接收者进行解耦。</li><li>责任链可以动态组合。当工作流程发生变化时，可以动态地改变链内的成员或者调动它们的次序，也可动态地新增或者删除责任。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>责任链较长时，请求的处理可能会涉及多个对象，从而影响系统的性能。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://zh.wikipedia.org/wiki/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科-责任链模式</a></li><li><a href="https://www.runoob.com/design-pattern/chain-of-responsibility-pattern.html" target="_blank" rel="noopener">菜鸟教程-责任链模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之行为型-中介者模式 (Mediator)</title>
    <link href="https://www.zhaohaihao.com/posts/2020030301.html"/>
    <id>https://www.zhaohaihao.com/posts/2020030301.html</id>
    <published>2020-03-02T17:23:21.000Z</published>
    <updated>2020-04-07T03:29:16.755Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/121-Mediator" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p></blockquote><h1 id="四个角色"><a href="#四个角色" class="headerlink" title="四个角色"></a>四个角色</h1><p>中介者模式主要有以下四个角色：</p><ul><li><strong>抽象中介者Mediator</strong>：提供了注册同事对象与转发同事对象信息的抽象方法。</li><li><strong>具体中介者Concrete Mediator</strong>：管理同事对象类，协调所有同事对象之间的交互关系。</li><li><strong>抽象同事类Colleague</strong>：提供同事对象之间交互的抽象方法。</li><li><strong>具体同事类Concrete Colleague</strong>：抽象同事类的实现者，与其余同事对象交互时，交由中介者对象处理。</li></ul><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>中介者模式在日常生活中还是比较常见的。</p><p>微信群聊就是一个很典型的例子。公司员工之间有什么事都可以通过微信群这个中介者进行多人的沟通，而不需要每次都单独一对一的找员工沟通。</p><p>打个比方，最近新冠肆虐，很多公司都延迟复工了，公司人事经理需要给所有员工发延迟复工通知。假设忽略微信群发助手功能，那公司人事经理需要一对一的告知员工延迟复工，那是不是要忙死了？</p><p>现在我们通过微信群告知来进行简单的实现。</p><h2 id="创建抽象中介者"><a href="#创建抽象中介者" class="headerlink" title="创建抽象中介者"></a>创建抽象中介者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 工作群类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 12:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WorkGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加员工</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> staff 员工</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addStaff</span><span class="params">(IStaff staff)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> staff 发送消息的员工</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(IStaff staff, String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建具体中介者"><a href="#创建具体中介者" class="headerlink" title="创建具体中介者"></a>创建具体中介者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 微信工作群</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 12:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeChatWorkGroup</span> <span class="keyword">implements</span> <span class="title">WorkGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;IStaff&gt; staffList = <span class="keyword">new</span> ArrayList&lt;IStaff&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addStaff</span><span class="params">(IStaff staff)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (staff != <span class="keyword">null</span> &amp;&amp; !staffList.contains(staff)) &#123;</span><br><span class="line">            staffList.add(staff);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(IStaff staff, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (IStaff iStaff : staffList) &#123;</span><br><span class="line">            <span class="comment">// 排除自身, 给别的员工发消息</span></span><br><span class="line">            <span class="keyword">if</span> (!staff.equals(iStaff)) &#123;</span><br><span class="line">                iStaff.receiveMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建抽象同事类"><a href="#创建抽象同事类" class="headerlink" title="创建抽象同事类"></a>创建抽象同事类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 员工类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 12:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">IStaff</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> WorkGroup workGroup;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IStaff</span><span class="params">(WorkGroup workGroup, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.workGroup = workGroup;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建具体同事类"><a href="#创建具体同事类" class="headerlink" title="创建具体同事类"></a>创建具体同事类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 老板</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 12:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> <span class="keyword">extends</span> <span class="title">IStaff</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Boss</span><span class="params">(WorkGroup workGroup)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(workGroup, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 注册至中介者对象当中</span></span><br><span class="line">        workGroup.addStaff(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"老板接收到消息: %s"</span>, message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"老板发送消息: %s"</span>, message));</span><br><span class="line">        workGroup.sendMessage(<span class="keyword">this</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 人事经理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 12:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonnelManager</span> <span class="keyword">extends</span> <span class="title">IStaff</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PersonnelManager</span><span class="params">(WorkGroup workGroup)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(workGroup, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 注册至中介者对象当中</span></span><br><span class="line">        workGroup.addStaff(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"人事经理接收到消息: %s"</span>, message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"人事经理发送消息: %s"</span>, message));</span><br><span class="line">        workGroup.sendMessage(<span class="keyword">this</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 普通员工</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 12:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Staff</span> <span class="keyword">extends</span> <span class="title">IStaff</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Staff</span><span class="params">(WorkGroup workGroup, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(workGroup, name);</span><br><span class="line">        <span class="comment">// 注册至中介者对象当中</span></span><br><span class="line">        workGroup.addStaff(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"员工[%s]接收到消息: %s"</span>, <span class="keyword">this</span>.name, message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"员工[%s]发送消息: %s"</span>, <span class="keyword">this</span>.name, message));</span><br><span class="line">        workGroup.sendMessage(<span class="keyword">this</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-03 12:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建中介者对象</span></span><br><span class="line">        WorkGroup weChatWorkGroup = <span class="keyword">new</span> WeChatWorkGroup();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建具体同事对象</span></span><br><span class="line">        Boss boss = <span class="keyword">new</span> Boss(weChatWorkGroup);</span><br><span class="line">        PersonnelManager personnelManager = <span class="keyword">new</span> PersonnelManager(weChatWorkGroup);</span><br><span class="line">        Staff staffA = <span class="keyword">new</span> Staff(weChatWorkGroup, <span class="string">"海豪"</span>);</span><br><span class="line">        Staff staffB = <span class="keyword">new</span> Staff(weChatWorkGroup, <span class="string">"亚萍"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">        personnelManager.sendMessage(<span class="string">"@所有人 由于近期新冠疫情影响，公司决定延迟复工, 具体时间另行通知, 收到请回复!"</span>);</span><br><span class="line">        System.out.println(<span class="string">"&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">        boss.sendMessage(<span class="string">"疫情期间没事不要外出, 勤洗手, 戴口罩, 大家注意安全哦~"</span>);</span><br><span class="line">        System.out.println(<span class="string">"&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">        staffA.sendMessage(<span class="string">"收到"</span>);</span><br><span class="line">        System.out.println(<span class="string">"&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;"</span>);</span><br><span class="line">        staffB.sendMessage(<span class="string">"收到"</span>);</span><br><span class="line">        System.out.println(<span class="string">"&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>&gt;&gt;&gt;&gt;&gt;<br>人事经理发送消息: @所有人 由于近期新冠疫情影响，公司决定延迟复工, 具体时间另行通知, 收到请回复!<br>老板接收到消息: @所有人 由于近期新冠疫情影响，公司决定延迟复工, 具体时间另行通知, 收到请回复!<br>员工[海豪]接收到消息: @所有人 由于近期新冠疫情影响，公司决定延迟复工, 具体时间另行通知, 收到请回复!<br>员工[亚萍]接收到消息: @所有人 由于近期新冠疫情影响，公司决定延迟复工, 具体时间另行通知, 收到请回复!<br>&lt;&lt;&lt;&lt;&lt;</p><p>&gt;&gt;&gt;&gt;&gt;<br>老板发送消息: 疫情期间没事不要外出, 勤洗手, 戴口罩, 大家注意安全哦~<br>人事经理接收到消息: 疫情期间没事不要外出, 勤洗手, 戴口罩, 大家注意安全哦~<br>员工[海豪]接收到消息: 疫情期间没事不要外出, 勤洗手, 戴口罩, 大家注意安全哦~<br>员工[亚萍]接收到消息: 疫情期间没事不要外出, 勤洗手, 戴口罩, 大家注意安全哦~<br>&lt;&lt;&lt;&lt;&lt;</p><p>&gt;&gt;&gt;&gt;&gt;<br>员工[海豪]发送消息: 收到<br>老板接收到消息: 收到<br>人事经理接收到消息: 收到<br>员工[亚萍]接收到消息: 收到<br>&lt;&lt;&lt;&lt;&lt;</p><p>&gt;&gt;&gt;&gt;&gt;<br>员工[亚萍]发送消息: 收到<br>老板接收到消息: 收到<br>人事经理接收到消息: 收到<br>员工[海豪]接收到消息: 收到<br>&lt;&lt;&lt;&lt;&lt;</p></blockquote><h2 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/mediator/mediator01.png?x-oss-process=style/style01" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>当对象之间存在复杂的引用关系而导致依赖关系结构混乱且难以复用时。</li><li>交互的公共行为，当想创建一个运行于多个类之间的对象，但是又不想生成新的子类时。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>降低了对象之间的耦合性，提高了对象的复用性。</li><li>将对象间的一对多关联关系转变为一对一的关联关系，降低了程序的复杂度。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>在某些场景中，如果设计不妥当，会使得中介者对象本身过于复杂。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科-中介者模式</a></li><li><a href="https://www.runoob.com/design-pattern/mediator-pattern.html" target="_blank" rel="noopener">菜鸟教程-中介者模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之行为型-命令模式 (Command)</title>
    <link href="https://www.zhaohaihao.com/posts/2020030203.html"/>
    <id>https://www.zhaohaihao.com/posts/2020030203.html</id>
    <published>2020-03-02T14:48:01.000Z</published>
    <updated>2020-04-07T03:29:29.692Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/120-Command" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化。</p></blockquote><h1 id="四个角色"><a href="#四个角色" class="headerlink" title="四个角色"></a>四个角色</h1><p>命令模式主要有以下四个角色：</p><ul><li><strong>抽象命令类Command</strong>：声明执行操作的接口。</li><li><strong>具体命令类Concrete Command</strong>：是抽象命令类的具体实现类，持有接受者对象，同时通过调用接收者的功能来完成命令要执行的操作。</li><li><strong>接收者Receiver</strong>：执行命令功能的相关操作。</li><li><strong>调用者Invoker</strong>：拥有很多命令对象，并通过访问命令对象来执行相关请求，其不直接访问接收者。</li></ul><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>笔者女朋友在一家知识付费公司做人事兼老板助理，常常会接收到一些来自老板的工作安排。</p><p>笔者这里以此为例。假设这天下班，女朋友接到老板的以下几个工作安排：</p><ul><li>明早9点准时在公司公号上发布一篇xx的推文。</li><li>上午和老板一起外出看讲座场地。</li><li>安排明天下午两点的会议。</li></ul><h2 id="创建抽象命令类"><a href="#创建抽象命令类" class="headerlink" title="创建抽象命令类"></a>创建抽象命令类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 抽象命令接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-02 16:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行命令</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建具体命令类"><a href="#创建具体命令类" class="headerlink" title="创建具体命令类"></a>创建具体命令类</h2><p>每一个具体的工作安排对应一个具体的命令类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 发送推文命令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-02 16:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendTweetsCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Staff staff;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SendTweetsCommand</span><span class="params">(Staff staff)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.staff = staff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        staff.sendTweets();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 看场地命令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-02 16:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LookVenueCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Staff staff;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LookVenueCommand</span><span class="params">(Staff staff)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.staff = staff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        staff.lookVenue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 安排会议命令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-02 16:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AttendMeetingCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Staff staff;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AttendMeetingCommand</span><span class="params">(Staff staff)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.staff = staff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        staff.attendMeeting();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建接受者"><a href="#创建接受者" class="headerlink" title="创建接受者"></a>创建接受者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 接受者类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-02 16:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Staff</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Staff</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发推文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTweets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">"早上9点准时在公司公号上发布一篇xx的推文"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 看场地</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lookVenue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">"上午和老板一起外出看讲座场地"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 安排会议</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attendMeeting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name + <span class="string">"安排下午两点的会议"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建调用者"><a href="#创建调用者" class="headerlink" title="创建调用者"></a>创建调用者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 调用者类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-02 16:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Command&gt; commandList = <span class="keyword">new</span> ArrayList&lt;Command&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加命令</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> command 命令</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCommand</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        commandList.add(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送命令</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendCommands</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Command command : commandList) &#123;</span><br><span class="line">            command.execute();</span><br><span class="line">        &#125;</span><br><span class="line">        commandList.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-02 16:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Staff staff = <span class="keyword">new</span> Staff(<span class="string">"亚萍"</span>);</span><br><span class="line">        Command sendTweetsCommand = <span class="keyword">new</span> SendTweetsCommand(staff);</span><br><span class="line">        Command lookVenueCommand = <span class="keyword">new</span> LookVenueCommand(staff);</span><br><span class="line">        Command attendMeetingCommand = <span class="keyword">new</span> AttendMeetingCommand(staff);</span><br><span class="line"></span><br><span class="line">        Boss boss = <span class="keyword">new</span> Boss();</span><br><span class="line">        boss.addCommand(sendTweetsCommand);</span><br><span class="line">        boss.addCommand(lookVenueCommand);</span><br><span class="line">        boss.addCommand(attendMeetingCommand);</span><br><span class="line"></span><br><span class="line">        boss.sendCommands();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>亚萍早上9点准时在公司公号上发布一篇xx的推文<br>亚萍上午和老板一起外出看讲座场地<br>亚萍安排下午两点的会议</p></blockquote><h2 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/command/command01.png?x-oss-process=style/style01" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>当请求调用者和请求接受者需要解耦时，命令模式使得调用者和接受者不直接交互。</li><li>需要抽象出等待执行的行为。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>降低系统的耦合度。</li><li>良好的扩展性。新增或者删除命令不会影响其他类。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>对于每一个具体的操作都需要对应设计一个具体的命令类，这会导致类的数目的增加，增加系统的复杂性。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://zh.wikipedia.org/wiki/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科-命令模式</a></li><li><a href="https://www.runoob.com/design-pattern/command-pattern.html" target="_blank" rel="noopener">菜鸟教程-命令模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之行为型-备忘录模式 (Memento)</title>
    <link href="https://www.zhaohaihao.com/posts/2020030202.html"/>
    <id>https://www.zhaohaihao.com/posts/2020030202.html</id>
    <published>2020-03-02T06:45:29.000Z</published>
    <updated>2020-04-07T03:29:52.978Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/119-Memento" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>在不破坏封装性的前提下，捕获一个对象的内部状态，并且在该对象之外保存这个状态，从而可以在将来合适的时候把这个对象还原到之前保存的状态。</p></blockquote><p>备忘录模式也叫<strong>快照模式</strong>。</p><h1 id="三个角色"><a href="#三个角色" class="headerlink" title="三个角色"></a>三个角色</h1><p>备忘录模式主要的角色有以下三个：</p><ul><li><strong>发起人Originator</strong>：负责创建一个备忘录，记录当前时刻发起人的内部状态，同时提供恢复备忘录数据的能力。</li><li><strong>备忘录Memento</strong>：负责存储发起人对象的内部状态。</li><li><strong>管理者Caretaker</strong>：对备忘录进行管理，提供保存与获取备忘录的功能，但是不能对备忘录的内容进行操作或者检查。</li></ul><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>我们在使用 <code>IntelliJ IDEA</code> 进行开发的时候，<code>IntelliJ IDEA</code> 会将所有的更改进行自动保存。而且在我们开发的任何阶段我们都可以对不必要的更改进行还原操作，让任何文件或者目录都可以恢复到更改之前的任何状态。</p><p>笔者这里就 <code>IntelliJ IDEA</code> 的保存和还原更改为例来进行简单的示例说明。</p><h2 id="创建发起人"><a href="#创建发起人" class="headerlink" title="创建发起人"></a>创建发起人</h2><p>在该示例当中，我们是对代码文件进行备份，所以其可以作为是一个发起人角色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 代码文件(发起人)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-02 11:22</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备份编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeFile</span><span class="params">(String className, String content, String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处省略getter、setter方法</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建代码文件备份</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CodeFileMemento <span class="title">saveToMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建了一个新的备份, 备份编号: "</span> + <span class="keyword">this</span>.code);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CodeFileMemento(<span class="keyword">this</span>.className, <span class="keyword">this</span>.content, <span class="keyword">this</span>.code);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 撤销至某个备份</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> codeFileMemento 代码文件备份</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undoFromMemento</span><span class="params">(CodeFileMemento codeFileMemento)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"撤销代码文件至原先备份, 内容为: "</span> + codeFileMemento);</span><br><span class="line">        <span class="keyword">this</span>.className = codeFileMemento.getClassName();</span><br><span class="line">        <span class="keyword">this</span>.content = codeFileMemento.getContent();</span><br><span class="line">        <span class="keyword">this</span>.code = codeFileMemento.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CodeFile&#123;"</span> + <span class="string">"className='"</span> + className + <span class="string">'\''</span> + <span class="string">", content='"</span> + content + <span class="string">'\''</span> + <span class="string">", code='"</span> + code +</span><br><span class="line">                <span class="string">'\''</span> + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建备忘录"><a href="#创建备忘录" class="headerlink" title="创建备忘录"></a>创建备忘录</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 代码文件备份</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-02 11:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeFileMemento</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 备份编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CodeFileMemento</span><span class="params">(String className, String content, String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.className = className;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"CodeFileMemento&#123;"</span> + <span class="string">"className='"</span> + className + <span class="string">'\''</span> + <span class="string">", content='"</span> + content + <span class="string">'\''</span> + <span class="string">", code='"</span> +</span><br><span class="line">                code + <span class="string">'\''</span> + <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建管理者"><a href="#创建管理者" class="headerlink" title="创建管理者"></a>创建管理者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 代码文件备份管理器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-02 11:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeFileMementoManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Stack&lt;CodeFileMemento&gt; CODE_FILE_MEMENTO_STACK = <span class="keyword">new</span> Stack&lt;CodeFileMemento&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取代码文件备份</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CodeFileMemento <span class="title">getCodeFileMemento</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CODE_FILE_MEMENTO_STACK.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加代码文件备份</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> codeFileMemento 代码文件备份</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCodeFileMemento</span><span class="params">(CodeFileMemento codeFileMemento)</span> </span>&#123;</span><br><span class="line">        CODE_FILE_MEMENTO_STACK.push(codeFileMemento);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-02 11:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CodeFileMementoManager codeFileMementoManager = <span class="keyword">new</span> CodeFileMementoManager();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 代码文件进行备份</span></span><br><span class="line">        CodeFile codeFile = <span class="keyword">new</span> CodeFile(<span class="string">"Test"</span>, <span class="string">"public class Test &#123;&#125;"</span>, <span class="string">"bak-0001"</span>);</span><br><span class="line">        CodeFileMemento codeFileMemento = codeFile.saveToMemento();</span><br><span class="line">        codeFileMementoManager.addCodeFileMemento(codeFileMemento);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改代码文件内容</span></span><br><span class="line">        codeFile.setContent(<span class="string">"public class Test &#123;public static void main(String[] args) &#123;&#125;&#125;"</span>);</span><br><span class="line">        codeFile.setCode(<span class="string">"bak-0002"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"当前文件内容: "</span> + codeFile);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 后悔了, 进行撤销操作</span></span><br><span class="line">        CodeFileMemento rollbackMemento = codeFileMementoManager.getCodeFileMemento();</span><br><span class="line">        codeFile.undoFromMemento(rollbackMemento);</span><br><span class="line">        System.out.println(<span class="string">"执行撤销操作后, 当前文件内容: "</span> + codeFile);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>创建了一个新的备份, 备份编号: bak-0001<br>当前文件内容: CodeFile{className=’Test’, content=’public class Test {public static void main(String[] args) {}}’, code=’bak-0002’}<br>撤销代码文件至原先备份, 内容为: CodeFileMemento{className=’Test’, content=’public class Test {}’, code=’bak-0001’}<br>执行撤销操作后, 当前文件内容: CodeFile{className=’Test’, content=’public class Test {}’, code=’bak-0001’}</p></blockquote><h2 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/memento/memento01.png?x-oss-process=style/style01" alt="image.png"></p><p>从类图中我们可以看到，我们的 <code>CodeFileMemento</code> (备忘录角色)只能由我们的 <code>CodeFile</code> (发起人角色)来创建，而 <code>CodeFileMemento</code> (备忘录角色)和 <code>CodeFileMementoManager</code> (管理者角色)之间是一个聚合关系。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>需要保存与恢复数据的相关业务场景。</li><li>需要提供一个可以回滚操作的场景，即可以恢复到之前保存的状态。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>为用户提供了一种可以恢复状态的机制。</li><li>保持关键对象的数据封装。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>对象需要保存的内部状态信息过多或者操作频繁时，会占用比较大的内存资源。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://www.runoob.com/design-pattern/memento-pattern.html" target="_blank" rel="noopener">菜鸟教程-备忘录模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之行为型-观察者模式 (Observer)</title>
    <link href="https://www.zhaohaihao.com/posts/2020030201.html"/>
    <id>https://www.zhaohaihao.com/posts/2020030201.html</id>
    <published>2020-03-02T01:12:38.000Z</published>
    <updated>2020-04-07T03:29:37.962Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/118-Observer" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者(观察者)都会收到通知并且自动更新。</p></blockquote><p>观察者模式提供了一种对象设计，让观察者和被观察者(主题)之间松耦合。</p><h1 id="四个角色"><a href="#四个角色" class="headerlink" title="四个角色"></a>四个角色</h1><p>观察者模式的主要角色有以下四个：</p><ul><li><strong>抽象主题角色Subject</strong>：将所欲对观察者对象的引用保存在一个集合里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加或者删除观察者对象。</li><li><strong>具体主题角色Concrete Subject</strong>：将有关状态存入具体观察者对象。在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。</li><li><strong>抽象观察者角色Observer</strong>：给所有的具体观察者定义一个接口，在得到主题的通知时更新自己。</li><li><strong>具体观察者角色Concrete Observer</strong>：实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态相互协调。</li></ul><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>最近新冠肆虐，药店的口罩很是畅销，甚至是脱销，大家都等着药店进口罩的通知。笔者以此作为示例。</p><p>方便起见，笔者这里使用Java内置的观察者模式。</p><p>在 <code>java.util</code> 包当中包含了最基本的 <code>Observer</code> 接口和 <code>Observable</code> 类，这与我们的抽象主题 <code>Subject</code> 和抽象观察者 <code>Observer</code> 很是相似。而且由于 <code>Observer</code> 接口和 <code>Observable</code> 类已经预先实现了许多功能，使得我们在使用上更加的方便。</p><h2 id="创建具体主题"><a href="#创建具体主题" class="headerlink" title="创建具体主题"></a>创建具体主题</h2><p>这里方法中调用的 <code>setChanged()</code> 方法和 <code>notifyObservers()</code> 方法都是由 <code>Observable</code> 类提供的。 <code>setChanged()</code> 代表着主题状态的改变。 <code>notifyObservers()</code> 则表示通知所有的注册了的观察者，参数可传可不传。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 药店类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-01 23:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pharmacy</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 药店名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pharmacy</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 采购</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pharmacy  药店</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> gauzeMask 口罩</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">purchase</span><span class="params">(Pharmacy pharmacy, GauzeMask gauzeMask)</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%s最近刚采购了一批%s, 数量为%s, 单价为%s"</span>, pharmacy.getName(), gauzeMask.getType(),</span><br><span class="line">                gauzeMask.getAmount(), gauzeMask.getPrice()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Observable 提供的方法, 代表主题状态的改变</span></span><br><span class="line">        setChanged();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Observable 提供的方法, 通知所有观察者</span></span><br><span class="line">        notifyObservers(gauzeMask);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建具体观察者"><a href="#创建具体观察者" class="headerlink" title="创建具体观察者"></a>创建具体观察者</h2><p><code>update()</code> 是父类抽象观察者 <code>Obserber</code> 中定义的方法。参数 <code>Observable o</code> 代表的是被观察的对象， <code>Object arg</code> 表示的是主题中发布通知时传递的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 顾客类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-01 23:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        Pharmacy pharmacy = (Pharmacy) o;</span><br><span class="line">        GauzeMask gauzeMask = (GauzeMask) arg;</span><br><span class="line">        System.out.println(String.format(<span class="string">"顾客%s收到%s的通知: 最近刚采购了一批%s, 数量为%s, 单价为%s"</span>, <span class="keyword">this</span>.name, pharmacy.getName(),</span><br><span class="line">                gauzeMask.getType(), gauzeMask.getAmount(), gauzeMask.getPrice()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建缺省实体类"><a href="#创建缺省实体类" class="headerlink" title="创建缺省实体类"></a>创建缺省实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 口罩类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-01 23:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GauzeMask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 种类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GauzeMask</span><span class="params">(String type, <span class="keyword">int</span> amount, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.amount = amount;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAmount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-01 23:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pharmacy pharmacy = <span class="keyword">new</span> Pharmacy(<span class="string">"一方大药房"</span>);</span><br><span class="line">        GauzeMask gauzeMask = <span class="keyword">new</span> GauzeMask(<span class="string">"一次性口罩"</span>, <span class="number">5000</span>, <span class="number">4.8</span>);</span><br><span class="line"></span><br><span class="line">        Customer customer1 = <span class="keyword">new</span> Customer(<span class="string">"海豪"</span>);</span><br><span class="line">        Customer customer2 = <span class="keyword">new</span> Customer(<span class="string">"亚萍"</span>);</span><br><span class="line">        pharmacy.addObserver(customer1);</span><br><span class="line">        pharmacy.addObserver(customer2);</span><br><span class="line"></span><br><span class="line">        pharmacy.purchase(pharmacy, gauzeMask);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>一方大药房最近刚采购了一批一次性口罩, 数量为5000, 单价为4.8<br>顾客亚萍收到一方大药房的通知: 最近刚采购了一批一次性口罩, 数量为5000, 单价为4.8<br>顾客海豪收到一方大药房的通知: 最近刚采购了一批一次性口罩, 数量为5000, 单价为4.8</p></blockquote><h2 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/observer/observer01.png?x-oss-process=style/style01" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>对象之间存在一对多的关系，同时一个对象的状态发生改变会影响其他对象。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>观察者和被观察者之间是抽象耦合关系，降低了两者的耦合度。</li><li>观察者与被观察者之间建立了一套触发机制。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>有可能会出现循环引用。</li><li>当观察者对象很多时，发布通知的时间消耗会延长，从而影响程序的效率。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://zh.wikipedia.org/wiki/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科-观察者模式</a></li><li><a href="https://www.runoob.com/design-pattern/observer-pattern.html" target="_blank" rel="noopener">菜鸟教程-观察者模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之行为型-解释器模式 (Interpreter)</title>
    <link href="https://www.zhaohaihao.com/posts/2020030101.html"/>
    <id>https://www.zhaohaihao.com/posts/2020030101.html</id>
    <published>2020-03-01T12:15:20.000Z</published>
    <updated>2020-04-07T03:29:33.791Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/117-Interpreter" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。</p></blockquote><p>定义中提到的文法和句子的概念同编译原理中的描述相同，“文法”指的语言的语法规则，而“句子”是指语言集中的元素。</p><h1 id="四个角色"><a href="#四个角色" class="headerlink" title="四个角色"></a>四个角色</h1><p>解释器模式主要有四个角色：</p><ul><li><strong>环境角色Context</strong>：包含解释器之外的一些全局信息。</li><li><strong>抽象表达式AbstractExpression</strong>：声明一个抽象的解释操作，这个接口为抽象语法树中所有的节点所共享。</li><li><strong>终结符表达式TerminalExpression</strong>：实现与文法中的终结符相关联的解释操作。</li><li><strong>非终结符表达式NonterminalExpression</strong>：为文法中的非终结符实现解释操作，对文法中每一条规则R1、R2…Rn都需要一个具体的非终结符表达式类。</li></ul><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>笔者这里通过解释器模式来实现运算表达式的计算，例如计算表达式A-B+C的值。</p><h2 id="创建抽象表达式"><a href="#创建抽象表达式" class="headerlink" title="创建抽象表达式"></a>创建抽象表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 抽象表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-29 18:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解释</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建终结符表达式"><a href="#创建终结符表达式" class="headerlink" title="创建终结符表达式"></a>创建终结符表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 加法表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-01 18:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Expression left;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Expression right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddExpression</span><span class="params">(Expression left, Expression right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.left.interpret() + <span class="keyword">this</span>.right.interpret();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 减法表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-01 18:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Expression left;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Expression right;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SubExpression</span><span class="params">(Expression left, Expression right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.left.interpret() - <span class="keyword">this</span>.right.interpret();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建非终结符表达式"><a href="#创建非终结符表达式" class="headerlink" title="创建非终结符表达式"></a>创建非终结符表达式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 数字表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-01 18:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberExpression</span> <span class="keyword">implements</span> <span class="title">Expression</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumberExpression</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumberExpression</span><span class="params">(String number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.number = Integer.valueOf(number);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">interpret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s"</span>, <span class="keyword">this</span>.number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建环境角色"><a href="#创建环境角色" class="headerlink" title="创建环境角色"></a>创建环境角色</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 表达式环境角色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-01 18:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpressionContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Expression expression;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expStr 字符串表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">parse</span><span class="params">(String expStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Stack&lt;Expression&gt; stack = <span class="keyword">new</span> Stack&lt;Expression&gt;();</span><br><span class="line"></span><br><span class="line">        String[] expArray = expStr.split(<span class="string">","</span>);</span><br><span class="line"></span><br><span class="line">        Expression left;</span><br><span class="line">        Expression right;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; expArray.length; i++) &#123;</span><br><span class="line">            String exp = expArray[i];</span><br><span class="line">            <span class="keyword">if</span> (isSymbol(exp)) &#123;</span><br><span class="line">                <span class="comment">// +或者-运算符号</span></span><br><span class="line">                left = stack.pop();</span><br><span class="line">                right = <span class="keyword">new</span> NumberExpression(expArray[++i]);</span><br><span class="line">                System.out.println(String.format(<span class="string">"数字%s和%s开始进行%s操作运算"</span>, left, right, exp));</span><br><span class="line">                Expression expression = getExpression(left, right, exp);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> result = expression.interpret();</span><br><span class="line">                System.out.println(String.format(<span class="string">"运算结果%s开始入栈"</span>, result));</span><br><span class="line">                stack.push(<span class="keyword">new</span> NumberExpression(result));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 数字</span></span><br><span class="line">                NumberExpression numberExpression = <span class="keyword">new</span> NumberExpression(exp);</span><br><span class="line">                System.out.println(String.format(<span class="string">"数字%s开始入栈"</span>, numberExpression));</span><br><span class="line">                stack.push(numberExpression);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> stack.pop().interpret();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否是符号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> exp 表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSymbol</span><span class="params">(String exp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"+"</span>.equals(exp) || <span class="string">"-"</span>.equals(exp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> left 左表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> right 右表达式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> symbol 运算符号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Expression <span class="title">getExpression</span><span class="params">(Expression left, Expression right, String symbol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"+"</span>.equals(symbol)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> AddExpression(left, right);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"-"</span>.equals(symbol)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SubExpression(left, right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(String.format(<span class="string">"当前解析器不支持该操作符%s的解析"</span>, symbol));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-03-01 18:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String expStr = <span class="string">"10,-,4,+,1"</span>;</span><br><span class="line">        ExpressionContext expressionContext = <span class="keyword">new</span> ExpressionContext();</span><br><span class="line">        <span class="keyword">int</span> parse = expressionContext.parse(expStr);</span><br><span class="line">        System.out.println(<span class="string">"表达式最终的运算结果为: "</span> + parse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果如下：</p><blockquote><p>数字10开始入栈<br>数字10和4开始进行-操作运算<br>运算结果6开始入栈<br>数字6和1开始进行+操作运算<br>运算结果7开始入栈<br>表达式最终的运算结果为: 7</p></blockquote><h2 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/interpreter/interpreter01.png?x-oss-process=style/style01" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>解释器模式在实际的软件开发中使用比较少，因为它会引起效率、性能以及维护等问题。</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>将一个需要解释执行的语言中的句子表示为一个抽象语法树。</li><li>某种类型的问题重复出现可以用一种简单的语言来进行表达。</li><li>简单语法需要解释的场景。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>可扩展性比较好，灵活。</li><li>简单文法较为容易实现。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>当语法规则数目太多时，类的个数将急剧增加，导致系统的复杂度增加。</li><li>解释器模式采用大量的循环和递归调用，执行效率较为低下。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://www.runoob.com/design-pattern/interpreter-pattern.html" target="_blank" rel="noopener">菜鸟教程-解释器模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之行为型-策略模式 (Strategy)</title>
    <link href="https://www.zhaohaihao.com/posts/2020022802.html"/>
    <id>https://www.zhaohaihao.com/posts/2020022802.html</id>
    <published>2020-02-28T08:11:58.000Z</published>
    <updated>2020-04-07T03:29:49.571Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/116-Strategy" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户。</p></blockquote><h1 id="三个角色"><a href="#三个角色" class="headerlink" title="三个角色"></a>三个角色</h1><p>策略模式中主要有三个角色：</p><ul><li><strong>抽象策略类Strategy</strong>：定义所有支持的算法的公共接口，可以是接口也可以是抽象类。</li><li><strong>具体策略类Concrete Strategy</strong>：封装具体的算法或者行为。</li><li><strong>环境类Context</strong>：维护一个策略类的引用，提供给客户端调用。</li></ul><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>笔者这里针对某超市的会员体系为例。不同等级的会员拥有不同的打折力度，具体情况如下表。</p><table><thead><tr><th align="center"><strong>超市会员打折对照表</strong></th><th></th></tr></thead><tbody><tr><td align="center"><strong>会员等级</strong></td><td><strong>打折力度</strong></td></tr><tr><td align="center">普通会员</td><td>不打折</td></tr><tr><td align="center">黄金会员</td><td>九五折</td></tr><tr><td align="center">铂金会员</td><td>八八折</td></tr><tr><td align="center">钻石会员</td><td>八折</td></tr></tbody></table><h2 id="创建抽象策略"><a href="#创建抽象策略" class="headerlink" title="创建抽象策略"></a>创建抽象策略</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 会员策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-28 16:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打折</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">discount</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建具体策略"><a href="#创建具体策略" class="headerlink" title="创建具体策略"></a>创建具体策略</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 普通会员策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-28 16:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrdinaryMemberStrategy</span> <span class="keyword">implements</span> <span class="title">MemberStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"普通会员不打折"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 黄金会员策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-28 16:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoldMemberStrategy</span> <span class="keyword">implements</span> <span class="title">MemberStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"黄金会员所有商品打九五折"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 铂金会员策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-28 17:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PlatinumMemberStrategy</span> <span class="keyword">implements</span> <span class="title">MemberStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"铂金会员所有商品打八八折"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 钻石会员策略</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-28 17:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiamondMemberStrategy</span> <span class="keyword">implements</span> <span class="title">MemberStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"钻石会员所有商品打八折"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建环境类"><a href="#创建环境类" class="headerlink" title="创建环境类"></a>创建环境类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 打折活动</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-28 17:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscountActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MemberStrategy memberStrategy;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DiscountActivity</span><span class="params">(MemberStrategy memberStrategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.memberStrategy = memberStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打折</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">discount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        memberStrategy.discount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-28 17:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String member = <span class="string">"黄金会员"</span>;</span><br><span class="line">        DiscountActivity discountActivity;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"黄金会员"</span>.equals(member)) &#123;</span><br><span class="line">            discountActivity = <span class="keyword">new</span> DiscountActivity(<span class="keyword">new</span> GoldMemberStrategy());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"铂金会员"</span>.equals(member)) &#123;</span><br><span class="line">            discountActivity = <span class="keyword">new</span> DiscountActivity(<span class="keyword">new</span> PlatinumMemberStrategy());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"钻石会员"</span>.equals(member)) &#123;</span><br><span class="line">            discountActivity = <span class="keyword">new</span> DiscountActivity(<span class="keyword">new</span> DiamondMemberStrategy());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            discountActivity = <span class="keyword">new</span> DiscountActivity(<span class="keyword">new</span> OrdinaryMemberStrategy());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        discountActivity.discount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>黄金会员所有商品打九五折</p></blockquote><h2 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/strategy/strategy01.png?x-oss-process=style/style01" alt="image.png"></p><h1 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h1><p>上述示例代码的测试类即我们的客户端，我们可以看到，我们并未完全消除 <code>if...else</code> 这种条件语句，而且每次方法执行到此处时，都需要创建一个策略对象和一个活动对象，会存在重复创建的现象。</p><h1 id="方案改进"><a href="#方案改进" class="headerlink" title="方案改进"></a>方案改进</h1><p>为了避免上述的问题，我们结合策略模式和工厂模式在原有的示例代码上进行改造。</p><h2 id="新增工厂类"><a href="#新增工厂类" class="headerlink" title="新增工厂类"></a>新增工厂类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 会员策略工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-28 17:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberStrategyFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, MemberStrategy&gt; MEMBER_STRATEGY_MAP = <span class="keyword">new</span> HashMap&lt;String, MemberStrategy&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MemberStrategyFactory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取会员策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member 会员等级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MemberStrategy <span class="title">getMemberStrategy</span><span class="params">(String member)</span> </span>&#123;</span><br><span class="line">        MemberStrategy memberStrategy = MEMBER_STRATEGY_MAP.get(member);</span><br><span class="line">        <span class="keyword">return</span> memberStrategy == <span class="keyword">null</span> ? MEMBER_STRATEGY_MAP.get(MemberKey.ORDINARY) : memberStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        MEMBER_STRATEGY_MAP.put(MemberKey.ORDINARY, <span class="keyword">new</span> OrdinaryMemberStrategy());</span><br><span class="line">        MEMBER_STRATEGY_MAP.put(MemberKey.GOLD, <span class="keyword">new</span> GoldMemberStrategy());</span><br><span class="line">        MEMBER_STRATEGY_MAP.put(MemberKey.PLATINUM, <span class="keyword">new</span> PlatinumMemberStrategy());</span><br><span class="line">        MEMBER_STRATEGY_MAP.put(MemberKey.DIAMOND, <span class="keyword">new</span> DiamondMemberStrategy());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会员键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberKey</span> </span>&#123;</span><br><span class="line">        String ORDINARY = <span class="string">"普通会员"</span>;</span><br><span class="line">        String GOLD = <span class="string">"黄金会员"</span>;</span><br><span class="line">        String PLATINUM = <span class="string">"铂金会员"</span>;</span><br><span class="line">        String DIAMOND = <span class="string">"钻石会员"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调整测试类"><a href="#调整测试类" class="headerlink" title="调整测试类"></a>调整测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-28 17:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String member = <span class="string">"黄金会员"</span>;</span><br><span class="line">        DiscountActivity discountActivity = <span class="keyword">new</span> DiscountActivity(MemberStrategyFactory.getMemberStrategy(member));</span><br><span class="line">        discountActivity.discount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>黄金会员所有商品打九五折</p></blockquote><p>这里我们可以看到，通过策略模式和工厂模式的组合使用，我们消除了客户端的 <code>if...else</code> 条件转义语句，使客户端变得相对简单。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>策略模式的使用方式一般并不是独立使用的，有可能需要结合工厂模式、单例模式、享元模式等设计模式来一起实现。</p><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>多个类的区别仅仅在于表现行为的不同。</li><li>一个系统需要动态地在几种算法中选择一种。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>可以避免使用多重条件语句。</li><li>符合开闭原则，可以在不修改原有代码的情况下，灵活增加新算法。</li><li>各算法彼此独立，且对客户端隐藏具体的算法实现，提高了算法的保密性和安全性。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>客户端必须理解所有策略算法的区别，并且自行决定使用哪一个策略类。</li><li>会造成很多的策略类。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://zh.wikipedia.org/wiki/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科-策略模式</a></li><li><a href="https://www.runoob.com/design-pattern/strategy-pattern.html" target="_blank" rel="noopener">菜鸟教程-策略模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之行为型-迭代器模式 (Iterator)</title>
    <link href="https://www.zhaohaihao.com/posts/2020022801.html"/>
    <id>https://www.zhaohaihao.com/posts/2020022801.html</id>
    <published>2020-02-28T05:55:21.000Z</published>
    <updated>2020-04-07T03:29:45.908Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/115-Iterator" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。</p></blockquote><h1 id="四个角色"><a href="#四个角色" class="headerlink" title="四个角色"></a>四个角色</h1><p>迭代器模式主要有以下四个角色：</p><ul><li><strong>抽象聚合角色Aggregate</strong>：定义存储、添加、删除聚合对象以及创建迭代器对象的接口。</li><li><strong>具体聚合角色Concrete Aggregate</strong>：实现抽象聚合类，返回一个具体的迭代器实例。</li><li><strong>抽象迭代器Iterator</strong>：定义访问和遍历聚合元素的接口。</li><li><strong>具体迭代器Concrete Iterator</strong>：实现抽象迭代器接口中锁定义的方法，完成对聚合对象的遍历，并且记录遍历的当前位置。</li></ul><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>笔者这里以超市的商品为例，需要做一个商品清单的展示。</p><h2 id="创建商品实体类"><a href="#创建商品实体类" class="headerlink" title="创建商品实体类"></a>创建商品实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 商品实体类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-28 14:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Goods</span><span class="params">(String name, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建抽象聚合角色"><a href="#创建抽象聚合角色" class="headerlink" title="创建抽象聚合角色"></a>创建抽象聚合角色</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 商品抽象聚合接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-28 14:26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsAggregate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addGoods</span><span class="params">(Goods goods)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeGoods</span><span class="params">(Goods goods)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取商品迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">GoodsIterator <span class="title">getGoodsIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建具体聚合角色"><a href="#创建具体聚合角色" class="headerlink" title="创建具体聚合角色"></a>创建具体聚合角色</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 商品具体聚合类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-28 14:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsAggregateImpl</span> <span class="keyword">implements</span> <span class="title">GoodsAggregate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Goods&gt; goodsList = <span class="keyword">new</span> ArrayList&lt;Goods&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addGoods</span><span class="params">(Goods goods)</span> </span>&#123;</span><br><span class="line">        goodsList.add(goods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeGoods</span><span class="params">(Goods goods)</span> </span>&#123;</span><br><span class="line">        goodsList.remove(goods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GoodsIterator <span class="title">getGoodsIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GoodsIteratorImpl(goodsList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建抽象迭代器角色"><a href="#创建抽象迭代器角色" class="headerlink" title="创建抽象迭代器角色"></a>创建抽象迭代器角色</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 商品抽象迭代器接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-28 14:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GoodsIterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Goods <span class="title">nextGoods</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否还有商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasGoods</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建具体迭代器角色"><a href="#创建具体迭代器角色" class="headerlink" title="创建具体迭代器角色"></a>创建具体迭代器角色</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 商品抽象迭代器类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-28 14:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GoodsIteratorImpl</span> <span class="keyword">implements</span> <span class="title">GoodsIterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Goods&gt; goodsList;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 商品位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GoodsIteratorImpl</span><span class="params">(List&lt;Goods&gt; goodsList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.goodsList = goodsList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Goods <span class="title">nextGoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"当前商品的位置是"</span> + index);</span><br><span class="line">        Goods goods = goodsList.get(index);</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">return</span> goods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasGoods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; goodsList.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-28 14:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建商品</span></span><br><span class="line">        Goods goods1 = <span class="keyword">new</span> Goods(<span class="string">"可乐"</span>, <span class="number">3.0</span>);</span><br><span class="line">        Goods goods2 = <span class="keyword">new</span> Goods(<span class="string">"薯片"</span>, <span class="number">5.0</span>);</span><br><span class="line">        Goods goods3 = <span class="keyword">new</span> Goods(<span class="string">"奶茶"</span>, <span class="number">3.0</span>);</span><br><span class="line">        Goods goods4 = <span class="keyword">new</span> Goods(<span class="string">"香肠"</span>, <span class="number">10.0</span>);</span><br><span class="line">        Goods goods5 = <span class="keyword">new</span> Goods(<span class="string">"奶粉"</span>, <span class="number">33.0</span>);</span><br><span class="line">        Goods goods6 = <span class="keyword">new</span> Goods(<span class="string">"牛肉干"</span>, <span class="number">23.0</span>);</span><br><span class="line"></span><br><span class="line">        GoodsAggregate goodsAggregate = <span class="keyword">new</span> GoodsAggregateImpl();</span><br><span class="line">        goodsAggregate.addGoods(goods1);</span><br><span class="line">        goodsAggregate.addGoods(goods2);</span><br><span class="line">        goodsAggregate.addGoods(goods3);</span><br><span class="line">        goodsAggregate.addGoods(goods4);</span><br><span class="line">        goodsAggregate.addGoods(goods5);</span><br><span class="line">        goodsAggregate.addGoods(goods6);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---商品清单---"</span>);</span><br><span class="line">        GoodsIterator goodsIterator = goodsAggregate.getGoodsIterator();</span><br><span class="line">        Goods goods;</span><br><span class="line">        <span class="keyword">while</span> (goodsIterator.hasGoods()) &#123;</span><br><span class="line">            goods = goodsIterator.nextGoods();</span><br><span class="line">            System.out.println(String.format(<span class="string">"商品名称: %s, 商品价格: %s"</span>, goods.getName(), goods.getPrice()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>—商品清单—<br>当前商品的位置是0<br>商品名称: 可乐, 商品价格: 3.0<br>当前商品的位置是1<br>商品名称: 薯片, 商品价格: 5.0<br>当前商品的位置是2<br>商品名称: 奶茶, 商品价格: 3.0<br>当前商品的位置是3<br>商品名称: 香肠, 商品价格: 10.0<br>当前商品的位置是4<br>商品名称: 奶粉, 商品价格: 33.0<br>当前商品的位置是5<br>商品名称: 牛肉干, 商品价格: 23.0</p></blockquote><h2 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/iterator/iterator01.png?x-oss-process=style/style01" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>当访问一个聚合对象中的内容但又不想暴露其内部表示。</li><li>需要为聚合对象提供多种的遍历方式。</li><li>当需要为遍历不同的聚合结构提供一个统一的接口。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>具有良好的封装性，为遍历不同的聚合结构提供了一个统一的接口。</li><li>分离了聚合类的遍历行为，简化聚合类。</li><li>具有良好的扩展性，新增聚合类和迭代器类无需修改原有代码。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>增加了类的个数，这在一定程度上增加了系统的复杂性。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://zh.wikipedia.org/wiki/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科-迭代器模式</a></li><li><a href="https://www.runoob.com/design-pattern/iterator-pattern.html" target="_blank" rel="noopener">菜鸟教程-迭代器模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之行为型-模板方法模式 (Template Method)</title>
    <link href="https://www.zhaohaihao.com/posts/2020022701.html"/>
    <id>https://www.zhaohaihao.com/posts/2020022701.html</id>
    <published>2020-02-27T02:12:30.000Z</published>
    <updated>2020-04-07T03:29:25.322Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/114-Template-Method" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>定义一个算法的步骤，并允许子类为一个或者多个步骤提供实现。</p></blockquote><p>模板方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。</p><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>笔者这里以做番茄炒蛋为例。笔者将做番茄炒蛋的步骤分为以下几步：倒油、放鸡蛋、放番茄、倒调料、翻炒。不考虑多余的细节问题，不同的人做番茄炒蛋的步骤应该是类似的。</p><h2 id="创建抽象模板"><a href="#创建抽象模板" class="headerlink" title="创建抽象模板"></a>创建抽象模板</h2><p>这里主要定义炒菜的步骤。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 抽象模板类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-27 15:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractCook</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 做饭的整体步骤</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">cook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pourOil();</span><br><span class="line">        <span class="keyword">this</span>.addEgg();</span><br><span class="line">        <span class="keyword">this</span>.addTomato();</span><br><span class="line">        <span class="keyword">this</span>.pourSeasoning();</span><br><span class="line">        <span class="keyword">this</span>.stirFry();</span><br><span class="line">        <span class="keyword">if</span> (needChoppedGreenOnion()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.addChoppedGreenOnion();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 倒油</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">pourOil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"倒入食用油"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放鸡蛋</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addEgg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"放入鸡蛋"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放番茄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addTomato</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"放入番茄"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 翻炒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">stirFry</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"快速翻炒"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放葱花</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addChoppedGreenOnion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"放点葱花"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否需要葱花 (钩子方法)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">needChoppedGreenOnion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 倒调味品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">pourSeasoning</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>needChoppedGreenOnion()</code> 是一个钩子方法，让具体的子类来决定是否添加葱花，默认不添加。</p><p>以上的部分方法用 <code>final</code> 修饰，是为了防止子类对其进行重写。</p><h2 id="创建具体子类"><a href="#创建具体子类" class="headerlink" title="创建具体子类"></a>创建具体子类</h2><p>这里以笔者做饭和女朋友做饭为例。由于两人的口味不同，倒入的调味品会存在些许差异。而且笔者喜欢在番茄炒蛋中加入葱花。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 具体子类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-27 16:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MeCook</span> <span class="keyword">extends</span> <span class="title">AbstractCook</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pourSeasoning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"放点盐"</span>);</span><br><span class="line">        System.out.println(<span class="string">"放点酱油"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此处覆盖了父类钩子方法的默认实现</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">needChoppedGreenOnion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 具体子类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-27 16:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GirlFriendCook</span> <span class="keyword">extends</span> <span class="title">AbstractCook</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pourSeasoning</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"放点盐"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到在 <code>MeCook</code> 类中重写了父类的 <code>needChoppedGreenOnion()</code> 方法，那么对于父类中模板方法执行 <code>needChoppedGreenOnion()</code> 方法时，拿到的其实是子类方法的返回值。</p><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-27 16:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 我做番茄炒蛋</span></span><br><span class="line">        System.out.println(<span class="string">"---我做番茄炒蛋 开始---"</span>);</span><br><span class="line">        AbstractCook meCook = <span class="keyword">new</span> MeCook();</span><br><span class="line">        meCook.cook();</span><br><span class="line">        System.out.println(<span class="string">"---我做番茄炒蛋 结束---"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 女朋友做番茄炒蛋</span></span><br><span class="line">        System.out.println(<span class="string">"---女朋友做番茄炒蛋 开始---"</span>);</span><br><span class="line">        AbstractCook girlFriendCook = <span class="keyword">new</span> GirlFriendCook();</span><br><span class="line">        girlFriendCook.cook();</span><br><span class="line">        System.out.println(<span class="string">"---女朋友做番茄炒蛋 结束---"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类输出的结果如下：</p><blockquote><p>—我做番茄炒蛋 开始—<br>倒入食用油<br>放入鸡蛋<br>放入番茄<br>放点盐<br>放点酱油<br>快速翻炒<br>放点葱花<br>—我做番茄炒蛋 结束—<br>—女朋友做番茄炒蛋 开始—<br>倒入食用油<br>放入鸡蛋<br>放入番茄<br>放点盐<br>快速翻炒<br>—女朋友做番茄炒蛋 结束—</p></blockquote><h2 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/template-method/template-method01.png?x-oss-process=style/style01" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>算法的整体步骤固定，但其中的个别部分易变。</li><li>多个子类存在公共的行为，可以将其提取出来并且集中到一个公共父类当中，避免代码重复。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>父类提供公共部分代码，提高复用性。</li><li>将不变部分的算法封装到父类中实现，把可变部分的算法由子类继承去实现，提高了扩展性。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>对于每个不同的实现都需要一个子类来实现，导致类数目的增加，增加系统实现的复杂度。</li><li>父类中的抽象方法由自子类实现，如果父类添加新的抽象方法，所有的子类都需要修改。</li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><strong>钩子方法</strong>：提供缺省行为，子类可以在必要时进行扩展。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://zh.wikipedia.org/wiki/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95" target="_blank" rel="noopener">维基百科-模板方法</a></li><li><a href="https://www.runoob.com/design-pattern/template-pattern.html" target="_blank" rel="noopener">菜鸟教程-模板模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之结构型-代理模式 (Proxy)</title>
    <link href="https://www.zhaohaihao.com/posts/2020022602.html"/>
    <id>https://www.zhaohaihao.com/posts/2020022602.html</id>
    <published>2020-02-26T07:02:01.000Z</published>
    <updated>2020-04-07T03:30:54.651Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/113-Proxy" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>为其他对象提供一种代理用来控制对这个对象的访问。</p></blockquote><p>在代理模式中，代理对象作为访问对象和目标对象之间的中介。</p><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>笔者这里以购买火车票为例。我们购买火车票不一定要去火车站购买，我们可以通过12306网站或者去火车票代售点购买。</p><h2 id="基于继承的静态代理实现"><a href="#基于继承的静态代理实现" class="headerlink" title="基于继承的静态代理实现"></a>基于继承的静态代理实现</h2><h3 id="创建目标对象"><a href="#创建目标对象" class="headerlink" title="创建目标对象"></a>创建目标对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 火车站(目标对象)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 21:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Station</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 始发站</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String start;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 终点站</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Station</span><span class="params">(String username, String start, String end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处省略getter、setter方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%s购买了从%s至%s的火车票"</span>, username, start, end));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建代理对象"><a href="#创建代理对象" class="headerlink" title="创建代理对象"></a>创建代理对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 12306网站类(代理对象)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 21:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Website12306</span> <span class="keyword">extends</span> <span class="title">Station</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Website12306</span><span class="params">(String username, String start, String end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(username, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟日志打印</span></span><br><span class="line">        System.out.println(String.format(<span class="string">"【打印日志】 %s在12306平台上购买从%s至%s的火车票"</span>, getUsername(), getStart(), getEnd()));</span><br><span class="line">        <span class="keyword">super</span>.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 21:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Station station = <span class="keyword">new</span> Website12306(<span class="string">"海豪"</span>, <span class="string">"诸暨"</span>, <span class="string">"杭州"</span>);</span><br><span class="line">        station.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>【打印日志】 海豪在12306平台上购买从诸暨至杭州的火车票<br>海豪购买了从诸暨至杭州的火车票</p></blockquote><h3 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h3><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/proxy/proxy01.png?x-oss-process=style/style01" alt="image.png"></p><p>从上述示例代码中，我们可以看到，代理对象中的 <code>buy()</code> 方法实际上最终调用的是目标对象的 <code>buy()</code> 方法，同时我们也可以在代理对象中对方法进行增强。</p><h2 id="基于接口的静态代理实现"><a href="#基于接口的静态代理实现" class="headerlink" title="基于接口的静态代理实现"></a>基于接口的静态代理实现</h2><h3 id="创建抽象接口"><a href="#创建抽象接口" class="headerlink" title="创建抽象接口"></a>创建抽象接口</h3><p>可以是接口也可以是抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 抽象接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 21:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Station</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建目标对象-1"><a href="#创建目标对象-1" class="headerlink" title="创建目标对象"></a>创建目标对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 诸暨火车站(目标对象)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 22:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhuJiStation</span> <span class="keyword">implements</span> <span class="title">Station</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 始发站</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String start;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 终点站</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZhuJiStation</span><span class="params">(String username, String start, String end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处省略getter、setter方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%s购买了从%s至%s的火车票"</span>, username, start, end));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建代理对象-1"><a href="#创建代理对象-1" class="headerlink" title="创建代理对象"></a>创建代理对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 12306网站类(代理对象)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 21:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Website12306</span> <span class="keyword">implements</span> <span class="title">Station</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 始发站</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String start;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 终点站</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String end;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Station station;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Website12306</span><span class="params">(String username, String start, String end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟日志打印</span></span><br><span class="line">        System.out.println(String.format(<span class="string">"【打印日志】 %s在12306平台上购买从%s至%s的火车票"</span>, username, start, end));</span><br><span class="line">        <span class="keyword">if</span> (station == <span class="keyword">null</span>) &#123;</span><br><span class="line">            station = <span class="keyword">new</span> ZhuJiStation(username, start, end);</span><br><span class="line">        &#125;</span><br><span class="line">        station.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类及输出-1"><a href="#测试类及输出-1" class="headerlink" title="测试类及输出"></a>测试类及输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 21:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Station station = <span class="keyword">new</span> Website12306(<span class="string">"海豪"</span>, <span class="string">"诸暨"</span>, <span class="string">"杭州"</span>);</span><br><span class="line">        station.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>【打印日志】 海豪在12306平台上购买从诸暨至杭州的火车票<br>海豪购买了从诸暨至杭州的火车票</p></blockquote><h3 id="类结构图-1"><a href="#类结构图-1" class="headerlink" title="类结构图"></a>类结构图</h3><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/proxy/proxy02.png?x-oss-process=style/style01" alt="image.png"></p><p>这种方式需要目标对象和代理对象实现同一个接口或者继承同一个抽象类。</p><h2 id="基于JDK动态代理实现"><a href="#基于JDK动态代理实现" class="headerlink" title="基于JDK动态代理实现"></a>基于JDK动态代理实现</h2><p>基于JDK动态代理的实现，主要依赖的是 <code>Proxy</code> 类的 <code>newProxyInstance()</code> 方法和 <code>InvocationHandler</code> 类的 <code>invoke()</code> 方法。</p><p>而且JDK动态代理不能够代理类，只能够基于接口实现。</p><h3 id="创建抽象接口-1"><a href="#创建抽象接口-1" class="headerlink" title="创建抽象接口"></a>创建抽象接口</h3><p>这个地方只能是接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 抽象接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 21:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Station</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建目标对象-2"><a href="#创建目标对象-2" class="headerlink" title="创建目标对象"></a>创建目标对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 诸暨火车站(目标对象)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 22:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhuJiStation</span> <span class="keyword">implements</span> <span class="title">Station</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 始发站</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String start;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 终点站</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZhuJiStation</span><span class="params">(String username, String start, String end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处省略getter、setter方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%s购买了从%s至%s的火车票"</span>, username, start, end));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建动态代理类"><a href="#创建动态代理类" class="headerlink" title="创建动态代理类"></a>创建动态代理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 动态代理类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 22:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StationDynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StationDynamicProxy</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">bind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Class clazz = target.getClass();</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(clazz.getClassLoader(), clazz.getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟日志打印</span></span><br><span class="line">        System.out.println(<span class="string">"【日志打印】真实操作之前进行日志打印"</span>);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(target, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类及输出-2"><a href="#测试类及输出-2" class="headerlink" title="测试类及输出"></a>测试类及输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 21:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Station station = (Station) <span class="keyword">new</span> StationDynamicProxy(<span class="keyword">new</span> ZhuJiStation(<span class="string">"海豪"</span>, <span class="string">"诸暨"</span>, <span class="string">"杭州"</span>)).bind();</span><br><span class="line">        station.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>【日志打印】真实操作之前进行日志打印<br>海豪购买了从诸暨至杭州的火车票</p></blockquote><h3 id="类结构图-2"><a href="#类结构图-2" class="headerlink" title="类结构图"></a>类结构图</h3><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/proxy/proxy03.png?x-oss-process=style/style01" alt="image.png"></p><h2 id="基于CGLib动态代理实现"><a href="#基于CGLib动态代理实现" class="headerlink" title="基于CGLib动态代理实现"></a>基于CGLib动态代理实现</h2><p>CGLib是针对于类的代理模式，使用CGLib就必须实现 <code>MethodInterceptor</code> 接口。</p><h3 id="创建目标对象-3"><a href="#创建目标对象-3" class="headerlink" title="创建目标对象"></a>创建目标对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 诸暨火车站(目标对象)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 22:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZhuJiStation</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 始发站</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String start;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 终点站</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String end;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处忽略getter、setter方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%s购买了从%s至%s的火车票"</span>, username, start, end));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建动态代理类-1"><a href="#创建动态代理类-1" class="headerlink" title="创建动态代理类"></a>创建动态代理类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 动态代理类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 22:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StationDynamicProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟日志打印</span></span><br><span class="line">        System.out.println(<span class="string">"【日志打印】真实操作之前进行日志打印"</span>);</span><br><span class="line">        <span class="keyword">return</span> methodProxy.invokeSuper(o, objects);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类及输出-3"><a href="#测试类及输出-3" class="headerlink" title="测试类及输出"></a>测试类及输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 21:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(ZhuJiStation<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> StationDynamicProxy());</span><br><span class="line">        ZhuJiStation proxy = (ZhuJiStation) enhancer.create();</span><br><span class="line">        proxy.setUsername(<span class="string">"海豪"</span>);</span><br><span class="line">        proxy.setStart(<span class="string">"诸暨"</span>);</span><br><span class="line">        proxy.setEnd(<span class="string">"杭州"</span>);</span><br><span class="line">        proxy.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>【日志打印】真实操作之前进行日志打印<br>【日志打印】真实操作之前进行日志打印<br>【日志打印】真实操作之前进行日志打印<br>【日志打印】真实操作之前进行日志打印<br>海豪购买了从诸暨至杭州的火车票</p></blockquote><h3 id="类结构图-3"><a href="#类结构图-3" class="headerlink" title="类结构图"></a>类结构图</h3><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/proxy/proxy04.png?x-oss-process=style/style01" alt="image.png"></p><p>CGLib摆脱了对于 <code>Proxy</code> 的依赖，从而避免了创建代理类必须继承 <code>Proxy</code> 的限制。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><p>访问对象不适合或者不能直接引用目标对象。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>将访问对象和目标对象分离，降低了系统的耦合度。</li><li>扩展性好，可以扩展目标对象的功能。</li><li>可以保护、增强目标对象。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>增加了系统的复杂度。</li><li>在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢。</li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="代理方式"><a href="#代理方式" class="headerlink" title="代理方式"></a>代理方式</h3><ul><li><strong>静态代理</strong>：通过在代码中显示地定义一个业务实现类的一个代理，在代理类中对同名的业务方法进行包装，用户通过调用代理类的被包装过的业务方法来调用目标对象的业务方法。同时对目标对象的业务方法进行增强。</li><li><strong>JDK动态代理</strong>：是通过接口中的方法名，在动态生成的代理类中调用业务实现类的同名方法。</li><li><strong>CGLib动态代理</strong>：是通过继承来实现的，生成的动态代理类是业务类的子类，通过重写业务方法进行代理。</li></ul><h3 id="Spring代理选择"><a href="#Spring代理选择" class="headerlink" title="Spring代理选择"></a>Spring代理选择</h3><ul><li>当Spring中的Bean有实现接口时，Spring会用JDK的动态代理。</li><li>当Spring中的Bean没有实现接口时，Spring会使用CGLib动态代理。</li></ul><p>可以强制Spring使用CGLib动态代理(在Spring的配置中添加 <code>&lt;aop:aspectj-autoproxy proxy-target-class=&quot;true&quot;</code> )。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科-代理模式</a></li><li><a href="https://www.runoob.com/design-pattern/proxy-pattern.html" target="_blank" rel="noopener">菜鸟教程-代理模式</a></li><li><a href="https://blog.csdn.net/weixin_41043145/article/details/97613108" target="_blank" rel="noopener">代理模式(静态代理、动态代理、CGLIB代理)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之结构型-桥接模式 (Bridge)</title>
    <link href="https://www.zhaohaihao.com/posts/2020022601.html"/>
    <id>https://www.zhaohaihao.com/posts/2020022601.html</id>
    <published>2020-02-26T00:29:31.000Z</published>
    <updated>2020-04-07T03:30:50.538Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/112-Bridge" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>将抽象部分与它的具体实现部分分离，使它们都可以独立地变化。</p></blockquote><p>桥接模式是通过组合的方式建立两个类之间的联系，而不是通过继承。</p><h1 id="四个角色"><a href="#四个角色" class="headerlink" title="四个角色"></a>四个角色</h1><p>桥接模式中主要有以下四个角色：</p><ul><li><strong>抽象化角色Abstraction</strong>：定义抽象类，同时包含一个对实现化对象的引用。</li><li><strong>扩展抽象化角色Refined Abstraction</strong>：抽象化角色的子类，实现父类中的方法，同时通过组合关系调用实现化角色当中的方法。</li><li><strong>实现化角色Implementor</strong>：定义实现类的接口，供扩展抽象化角色调用。</li><li><strong>具体实现化角色Concrete Implementor</strong>：定义实现化角色接口的具体实现。</li></ul><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>笔者这里用不同的笔(圆珠笔、铅笔)来绘制不同图形(圆形、正方形)来举例。</p><p>这里先不引进桥接模式，而是采用继承的方式来实现。</p><h2 id="创建抽象类"><a href="#创建抽象类" class="headerlink" title="创建抽象类"></a>创建抽象类</h2><p>这里创建一个抽象父类，主要是为了做接口约束。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 笔类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 14:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 笔的名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pen</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建抽象子类"><a href="#创建抽象子类" class="headerlink" title="创建抽象子类"></a>创建抽象子类</h2><p>创建不同笔种的抽象子类，继承抽象父类 <code>Pen</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 铅笔类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 14:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pencil</span> <span class="keyword">extends</span> <span class="title">Pen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pencil</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"铅笔"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 圆珠笔类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 14:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BallPen</span> <span class="keyword">extends</span> <span class="title">Pen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BallPen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"圆珠笔类"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建具体的实现子类"><a href="#创建具体的实现子类" class="headerlink" title="创建具体的实现子类"></a>创建具体的实现子类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 铅笔画圆类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 14:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleWithPencil</span> <span class="keyword">extends</span> <span class="title">Pencil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">"画圆"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 铅笔画正方形类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 14:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SquareWithPencil</span> <span class="keyword">extends</span> <span class="title">Pencil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">"画正方形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 圆珠笔画圆类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 14:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleWithBallPen</span> <span class="keyword">extends</span> <span class="title">BallPen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">"画圆"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 圆珠笔画正方形类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 14:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SquareWithBallPen</span> <span class="keyword">extends</span> <span class="title">BallPen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">"画正方形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 15:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pen circleWithBallPen = <span class="keyword">new</span> CircleWithBallPen();</span><br><span class="line">        circleWithBallPen.draw();</span><br><span class="line"></span><br><span class="line">        Pen circleWithPencil = <span class="keyword">new</span> CircleWithPencil();</span><br><span class="line">        circleWithPencil.draw();</span><br><span class="line"></span><br><span class="line">        Pen squareWithBallPen = <span class="keyword">new</span> SquareWithBallPen();</span><br><span class="line">        squareWithBallPen.draw();</span><br><span class="line"></span><br><span class="line">        Pen squareWithPencil = <span class="keyword">new</span> SquareWithPencil();</span><br><span class="line">        squareWithPencil.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>圆珠笔类画圆<br>铅笔画圆<br>圆珠笔类画正方形<br>铅笔画正方形</p></blockquote><h2 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示</p><p><img src="https://oss.zhaohaihao.com/photo/design-patterns/bridge/bridge01.png?x-oss-process=style/style01" alt="image.png"></p><h1 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h1><p>上述代码虽然能满足我们的需求，但是你会发现一个问题。</p><p>当我们需要扩展一项内容的时候，比方说，用各种笔来绘制直线图形，那这个时候我们就需要在示例中的抽象子类 <code>Pencil</code> 、 <code>BallPen</code> 当中各自增加 <code>LineWithPencil</code> 类和 <code>LineWithBallPen</code> 类。又或者，我们需要使用彩笔来绘制各种图形，那我们需要新增一个抽象子类 <code>ColourPen</code> ，然后写出其具体子类 <code>CircleWithColourPen</code> 类和 <code>SquareWithColourPen</code> 类。</p><p>换句话也就是说，我们在笔和图形这两个维度中任意增加一种情况，就需要增加不同维度数量的类。</p><p>延伸到多个维度，这种方式会导致类的成倍的增加，发生类爆炸。同时这种设计也使得程序的代码变得相当的臃肿。可见继承在这种场景中是相当麻烦的。</p><h1 id="方案改进"><a href="#方案改进" class="headerlink" title="方案改进"></a>方案改进</h1><p>现在引入桥接模式对上述示例进行实现。</p><p>通过示例，我们可以简单分析得知，这里变化的主要有两个部分，一个部分是笔的种类，另一个部分则是图形的种类。通过桥接模式，我们把这种多个维度分离出来，让其独立的变化，减少之间的耦合。</p><h2 id="创建实现化角色"><a href="#创建实现化角色" class="headerlink" title="创建实现化角色"></a>创建实现化角色</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 图形类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 14:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建具体实现化角色"><a href="#创建具体实现化角色" class="headerlink" title="创建具体实现化角色"></a>创建具体实现化角色</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 圆形类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 14:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"画圆"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 正方形类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 14:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"画正方形"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建抽象化角色"><a href="#创建抽象化角色" class="headerlink" title="创建抽象化角色"></a>创建抽象化角色</h2><p>此处抽象化角色通过组合的方式，包含了一个对实现化角色的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 笔类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 14:52</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 图形</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Shape shape;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pen</span><span class="params">(Shape shape)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.shape = shape;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建扩展抽象化角色"><a href="#创建扩展抽象化角色" class="headerlink" title="创建扩展抽象化角色"></a>创建扩展抽象化角色</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 铅笔类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 14:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pencil</span> <span class="keyword">extends</span> <span class="title">Pen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pencil</span><span class="params">(Shape shape)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(shape);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"铅笔"</span> + <span class="keyword">super</span>.shape.draw());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 圆珠笔类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 14:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BallPen</span> <span class="keyword">extends</span> <span class="title">Pen</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BallPen</span><span class="params">(Shape shape)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(shape);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"圆珠笔"</span> + <span class="keyword">super</span>.shape.draw());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类及输出-1"><a href="#测试类及输出-1" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-26 15:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Pen ballPen1 = <span class="keyword">new</span> BallPen(<span class="keyword">new</span> Circle());</span><br><span class="line">        ballPen1.draw();</span><br><span class="line"></span><br><span class="line">        Pen ballPen2 = <span class="keyword">new</span> BallPen(<span class="keyword">new</span> Square());</span><br><span class="line">        ballPen2.draw();</span><br><span class="line"></span><br><span class="line">        Pencil pencil1 = <span class="keyword">new</span> Pencil(<span class="keyword">new</span> Circle());</span><br><span class="line">        pencil1.draw();</span><br><span class="line"></span><br><span class="line">        Pencil pencil2 = <span class="keyword">new</span> Pencil(<span class="keyword">new</span> Square());</span><br><span class="line">        pencil2.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>圆珠笔画圆<br>圆珠笔画正方形<br>铅笔画圆<br>铅笔画正方形</p></blockquote><h2 id="类结构图-1"><a href="#类结构图-1" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示</p><p><img src="https://oss.zhaohaihao.com/photo/design-patterns/bridge/bridge02.png?x-oss-process=style/style01" alt="image.png"></p><p>通过类图我们可以清楚地看到实现化角色 <code>Shape</code> 和抽象化角色 <code>Pen</code> 之间是一比一的组合关系，两者都可以独立的扩展自己。如论两者如何进行组合，都不会发生类爆炸的情况。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>在抽象部分和具体实现部分之间需要增加更多的灵活性。</li><li>一个类存在两个(或者多个)独立变化的维度，并且这两个(或者多个)维度都需要独立地进行扩展。</li><li>由于多层继承导致系统类的个数剧增，或者说不想使用继承。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>抽象部分和具体实现部分分离</li><li>提高了系统的可扩展性</li><li>避免类爆炸</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>增加了系统的理解与设计难度</li><li>使用范围具有局限性，需要识别出系统中两个独立变化的维度</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://zh.wikipedia.org/wiki/%E6%A9%8B%E6%8E%A5%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科-桥接模式</a></li><li><a href="https://www.runoob.com/design-pattern/bridge-pattern.html" target="_blank" rel="noopener">菜鸟教程-桥接模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之结构型-组合模式 (Composite)</title>
    <link href="https://www.zhaohaihao.com/posts/2020022201.html"/>
    <id>https://www.zhaohaihao.com/posts/2020022201.html</id>
    <published>2020-02-22T12:12:38.000Z</published>
    <updated>2020-04-07T03:30:29.493Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/111-Composite" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>将对象组合成树形结构以表示“部分-整体”的层次结构。</p></blockquote><p>组合模式使得用户对单个对象和组合对象的使用具有一致性。</p><h1 id="模式中的角色"><a href="#模式中的角色" class="headerlink" title="模式中的角色"></a>模式中的角色</h1><ul><li><strong>抽象构件Component</strong>：为组合中的叶节点对象和分支节点对象声明公共接口并实现它们的默认行为。</li><li><strong>树叶构件Leaf</strong>：是组合中的叶节点对象，叶节点没有子节点。</li><li><strong>树枝构件Composite</strong>：是组合中的分支节点对象，定义组件的行为，拥有子节点。</li></ul><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>笔者这里以旧版个人博客的导航菜单来举例。结构如下图所示。</p><p><img src="https://oss.zhaohaihao.com/photo/design-patterns/composite/composite01.png?x-oss-process=style/style01" alt="image.png"></p><p>首页、专题推荐、设计模式、Spring Cloud这些可以看作具体菜单项。编程手册则可以看作一个菜单目录，菜单目录下拥有设计模式和Spring Cloud这些菜单项。</p><p>菜单项是包含具体的页面访问地址的。</p><h2 id="创建菜单组件类"><a href="#创建菜单组件类" class="headerlink" title="创建菜单组件类"></a>创建菜单组件类</h2><p>创建一个菜单组件的抽象类，内部包含一些默认实现，交由子类决定是否重写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 菜单组件类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-22 11:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"不支持添加操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"不支持删除操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"不支持获取地址操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">(MenuComponent menuComponent)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建菜单项类"><a href="#创建菜单项类" class="headerlink" title="创建菜单项类"></a>创建菜单项类</h2><p>这里菜单项包含名称和页面访问地址两个属性。菜单项是不能进行菜单的 <code>add</code> 和 <code>remove</code> 操作的，只有菜单目录是可以的。所以这里不重写上述的 <code>add</code> 和 <code>remove</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 菜单项类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-22 11:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuItem</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 菜单项名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面访问地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuItem</span><span class="params">(String name, String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%s, 菜单项的页面访问地址是: %s"</span>, name, url));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建菜单目录类"><a href="#创建菜单目录类" class="headerlink" title="创建菜单目录类"></a>创建菜单目录类</h2><p>菜单目录中可以包含很多的菜单项，而菜单项又是作为菜单组件。所以我们可以用一个容器属性去持有这些菜单组件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 菜单目录类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-22 15:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuCatalog</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 菜单目录名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 菜单目录层级, 方便区分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子菜单项列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;MenuComponent&gt; menuItems = <span class="keyword">new</span> ArrayList&lt;MenuComponent&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuCatalog</span><span class="params">(String name, Integer level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        menuItems.add(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        menuItems.remove(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">for</span> (MenuComponent menuComponent : menuItems) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.level != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.level; i++) &#123;</span><br><span class="line">                    System.out.print(<span class="string">"*"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            menuComponent.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-22 15:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String site = <span class="string">"www.zhaohaihao.com"</span>;</span><br><span class="line">        <span class="comment">// 首页</span></span><br><span class="line">        MenuComponent index = <span class="keyword">new</span> MenuItem(<span class="string">"首页"</span>, site);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编程手册</span></span><br><span class="line">        MenuComponent programmingManual = <span class="keyword">new</span> MenuCatalog(<span class="string">"编程手册"</span>, <span class="number">2</span>);</span><br><span class="line">        programmingManual.add(<span class="keyword">new</span> MenuItem(<span class="string">"设计模式"</span>, site + <span class="string">"/category/design-patterns"</span>));</span><br><span class="line">        programmingManual.add(<span class="keyword">new</span> MenuItem(<span class="string">"Spring Cloud"</span>, site + <span class="string">"/category/spring-cloud"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主题推荐</span></span><br><span class="line">        MenuComponent topic = <span class="keyword">new</span> MenuItem(<span class="string">"主题推荐"</span>, site + <span class="string">"/topic"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 网站导航栏, 顶级目录, 目录层级用1标记</span></span><br><span class="line">        MenuComponent main = <span class="keyword">new</span> MenuCatalog(<span class="string">"网站导航目录"</span>, <span class="number">1</span>);</span><br><span class="line">        main.add(index);</span><br><span class="line">        main.add(programmingManual);</span><br><span class="line">        main.add(topic);</span><br><span class="line"></span><br><span class="line">        main.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>网站导航目录<br>*首页, 菜单项的页面访问地址是: <a href="http://www.zhaohaihao.com">www.zhaohaihao.com</a><br>*编程手册<br>**设计模式, 菜单项的页面访问地址是: <a href="http://www.zhaohaihao.com/category/design-patterns">www.zhaohaihao.com/category/design-patterns</a><br>**Spring Cloud, 菜单项的页面访问地址是: <a href="http://www.zhaohaihao.com/category/spring-cloud">www.zhaohaihao.com/category/spring-cloud</a><br>*主题推荐, 菜单项的页面访问地址是: <a href="http://www.zhaohaihao.com/topic">www.zhaohaihao.com/topic</a></p></blockquote><h2 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示</p><p><img src="https://oss.zhaohaihao.com/photo/design-patterns/composite/composite02.png?x-oss-process=style/style01" alt="image.png"></p><p>由于菜单项类和菜单目录类都继承了菜单组件类，它们继承了菜单组件的所有行为。</p><h1 id="透明方式与安全方式"><a href="#透明方式与安全方式" class="headerlink" title="透明方式与安全方式"></a>透明方式与安全方式</h1><p>组合模式有透明方式和安全方式两种。</p><h2 id="透明方式"><a href="#透明方式" class="headerlink" title="透明方式"></a>透明方式</h2><p>抽象构件声明了所有子类的全部方法，客户端无需区分叶节点对象和分支节点对象，对于客户端来说是透明的。</p><p>但是叶节点对象本身不包含子节点，而抽象构件又声明实现了一些针对于子节点的 <code>add</code> 、 <code>remove</code> 等操作，这样会带来一些安全性的问题。</p><h2 id="安全方式"><a href="#安全方式" class="headerlink" title="安全方式"></a>安全方式</h2><p>安全方式与透明方式相反。</p><p>其将针对于子节点的 <code>add</code> 、 <code>remove</code> 等操作移到了分支节点对象中，而抽象构件和叶节点对象并不包含这些方法，这样一来就避免了透明方式所带来的安全性问题。</p><p>但是由于分支节点对象和叶节点对象接口行为的不同，客户端需要区分叶节点对象和分支节点对象，所以就失去了透明性。</p><h1 id="安全方式实现"><a href="#安全方式实现" class="headerlink" title="安全方式实现"></a>安全方式实现</h1><p>上述场景示例中的代码实际上是透明方式的组合模式。笔者这里对上述场景示例代码进行调整，使用安全方式的组合模式来实现。</p><h2 id="调整菜单组件类"><a href="#调整菜单组件类" class="headerlink" title="调整菜单组件类"></a>调整菜单组件类</h2><p>移除菜单组件中的 <code>add</code> 、 <code>remove</code> 、 <code>getUrl</code> 等操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getName</span><span class="params">(MenuComponent menuComponent)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"不支持打印操作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调整菜单项类"><a href="#调整菜单项类" class="headerlink" title="调整菜单项类"></a>调整菜单项类</h2><p>菜单项实现 <code>getUrl</code> 方法，而菜单目录则不实现该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuItem</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 菜单项名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面访问地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuItem</span><span class="params">(String name, String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"%s, 菜单项的页面访问地址是: %s"</span>, name, url));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调整菜单目录类"><a href="#调整菜单目录类" class="headerlink" title="调整菜单目录类"></a>调整菜单目录类</h2><p>菜单目录实现 <code>add</code> 、 <code>remove</code> 方法，而菜单项则不实现该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MenuCatalog</span> <span class="keyword">extends</span> <span class="title">MenuComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 菜单目录名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 菜单目录层级, 方便区分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子菜单项列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;MenuComponent&gt; menuItems = <span class="keyword">new</span> ArrayList&lt;MenuComponent&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MenuCatalog</span><span class="params">(String name, Integer level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        menuItems.add(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        menuItems.remove(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">(MenuComponent menuComponent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">        <span class="keyword">for</span> (MenuComponent menuComponent : menuItems) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.level != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.level; i++) &#123;</span><br><span class="line">                    System.out.print(<span class="string">"*"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            menuComponent.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="调整测试类"><a href="#调整测试类" class="headerlink" title="调整测试类"></a>调整测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String site = <span class="string">"www.zhaohaihao.com"</span>;</span><br><span class="line">        <span class="comment">// 首页</span></span><br><span class="line">        MenuComponent index = <span class="keyword">new</span> MenuItem(<span class="string">"首页"</span>, site);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编程手册</span></span><br><span class="line">        MenuCatalog programmingManual = <span class="keyword">new</span> MenuCatalog(<span class="string">"编程手册"</span>, <span class="number">2</span>);</span><br><span class="line">        programmingManual.add(<span class="keyword">new</span> MenuItem(<span class="string">"设计模式"</span>, site + <span class="string">"/category/design-patterns"</span>));</span><br><span class="line">        programmingManual.add(<span class="keyword">new</span> MenuItem(<span class="string">"Spring Cloud"</span>, site + <span class="string">"/category/spring-cloud"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主题推荐</span></span><br><span class="line">        MenuComponent topic = <span class="keyword">new</span> MenuItem(<span class="string">"主题推荐"</span>, site + <span class="string">"/topic"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 网站导航栏, 顶级目录, 目录层级用1标记</span></span><br><span class="line">        MenuCatalog main = <span class="keyword">new</span> MenuCatalog(<span class="string">"网站导航目录"</span>, <span class="number">1</span>);</span><br><span class="line">        main.add(index);</span><br><span class="line">        main.add(programmingManual);</span><br><span class="line">        main.add(topic);</span><br><span class="line"></span><br><span class="line">        main.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类结构图-1"><a href="#类结构图-1" class="headerlink" title="类结构图"></a>类结构图</h2><p>上述调整后类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/composite/composite03.png?x-oss-process=style/style01" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>需求中体现部分与整体层次的结构。</li><li>希望用户能够忽略组合对象与单个对象的差异，统一地使用组合结构中的所有对象。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>能够清楚地定义分层次的复杂对象</li><li>让用户忽略层次的差异，方便对整个层次结构进行控制</li><li>简化客户端代码</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>限制类型时会比较复杂</li><li>使设计变得更加抽象</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://www.runoob.com/design-pattern/composite-pattern.html" target="_blank" rel="noopener">菜鸟教程-组合模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之结构型-享元模式 (Flyweight)</title>
    <link href="https://www.zhaohaihao.com/posts/2020021601.html"/>
    <id>https://www.zhaohaihao.com/posts/2020021601.html</id>
    <published>2020-02-16T06:15:55.000Z</published>
    <updated>2020-04-07T03:30:37.495Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/110-Flyweight" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>运用共享技术有效地支持大量细粒度的对象。</p></blockquote><p>“享”即共享，“元”指的是元件，也就是小颗粒的东西。“享元”顾名思义就是共享小部件。</p><p>很多的系统程序包含大量的对象，但是这些对象绝大多数都是差不多的，除了一些极个别的属性外。</p><p>那么也就是说，在一个系统程序中有多个相同对象的时候，我们只需要共享一份就可以了，不必去实例化每一个对象。</p><h1 id="内部状态与外部状态"><a href="#内部状态与外部状态" class="headerlink" title="内部状态与外部状态"></a>内部状态与外部状态</h1><p>享元模式是区分内部状态与外部状态的：</p><ul><li><strong>内部状态：</strong>可以共享，在享元对象的内部，状态不会随着环境改变而改变</li><li><strong>外部状态：</strong>不可以共享，在享元对象的外部，状态会随着环境改变而改变</li></ul><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>笔者这里以衣服为例。将衣服的品牌作为内部属性共享，将衣服的大小、成分、价格作为外部属性使用。</p><h2 id="创建衣服类"><a href="#创建衣服类" class="headerlink" title="创建衣服类"></a>创建衣服类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 衣服类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-16 22:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Clothes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 衣服信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建衬衣类"><a href="#创建衬衣类" class="headerlink" title="创建衬衣类"></a>创建衬衣类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 衬衣类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-16 22:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Shirt</span> <span class="keyword">implements</span> <span class="title">Clothes</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 品牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成分</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String component;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Shirt</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSize</span><span class="params">(String size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComponent</span><span class="params">(String component)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.component = component;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(String price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"当前衬衣信息: &#123;品牌: %s, 大小: %s, 成分: %s, 价格: %s&#125;"</span>, brand, size, component, price));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在该场景中，笔者将品牌属性作为其内部状态，在对象创建的初期就初始化完成，状态不会随着外部环境变化，可以共享。</p><p>而将大小、成分、价格这些属性当做外部状态，通过 <code>setter</code> 方法供外部修改，状态会随外部环境变化，这些属性不能够共享。</p><h2 id="创建衬衣工厂类"><a href="#创建衬衣工厂类" class="headerlink" title="创建衬衣工厂类"></a>创建衬衣工厂类</h2><p>享元模式中通常会出现工厂模式，需要创建一个享元工厂来负责维护一个享元池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 衣服工厂类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-16 22:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClothesFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, Clothes&gt; CLOTHES_MAP = <span class="keyword">new</span> HashMap&lt;String, Clothes&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取衬衣</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> brand 品牌</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Clothes <span class="title">getShirt</span><span class="params">(String brand)</span> </span>&#123;</span><br><span class="line">        Shirt shirt = (Shirt) CLOTHES_MAP.get(brand);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (shirt == <span class="keyword">null</span>) &#123;</span><br><span class="line">            shirt = <span class="keyword">new</span> Shirt(brand);</span><br><span class="line">            CLOTHES_MAP.put(brand, shirt);</span><br><span class="line">            System.out.println(<span class="string">"创建新的品牌衬衣, 品牌为: "</span> + brand);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> shirt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><p>方便起见，在该测试类中随机模拟数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-16 23:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] BRAND = &#123;<span class="string">"YOUNGOR雅戈尔"</span>, <span class="string">"FIRS杉杉"</span>, <span class="string">"ROMON罗蒙"</span>, <span class="string">"Hodo红豆"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] SIZE = &#123;<span class="string">"S"</span>, <span class="string">"M"</span>, <span class="string">"L"</span>, <span class="string">"XL"</span>, <span class="string">"XXL"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] COMPONENT = &#123;<span class="string">"棉"</span>, <span class="string">"涤纶"</span>, <span class="string">"真丝"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] PRICE = &#123; <span class="string">"￥99"</span>, <span class="string">"￥129"</span>, <span class="string">"￥149"</span>, <span class="string">"￥199"</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机模拟</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strs 随机模拟数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRandom</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="keyword">new</span> Random().nextInt(strs.length)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Shirt shirt = (Shirt) ClothesFactory.getShirt(getRandom(BRAND));</span><br><span class="line">            shirt.setSize(getRandom(SIZE));</span><br><span class="line">            shirt.setComponent(getRandom(COMPONENT));</span><br><span class="line">            shirt.setPrice(getRandom(PRICE));</span><br><span class="line">            shirt.info();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>创建新的品牌衬衣, 品牌为: ROMON罗蒙<br>当前衬衣信息: {品牌: ROMON罗蒙, 大小: M, 成分: 真丝, 价格: ￥129}<br>创建新的品牌衬衣, 品牌为: FIRS杉杉<br>当前衬衣信息: {品牌: FIRS杉杉, 大小: S, 成分: 棉, 价格: ￥199}<br>当前衬衣信息: {品牌: ROMON罗蒙, 大小: M, 成分: 棉, 价格: ￥99}<br>创建新的品牌衬衣, 品牌为: Hodo红豆<br>当前衬衣信息: {品牌: Hodo红豆, 大小: M, 成分: 棉, 价格: ￥99}<br>当前衬衣信息: {品牌: FIRS杉杉, 大小: XL, 成分: 真丝, 价格: ￥99}<br>当前衬衣信息: {品牌: ROMON罗蒙, 大小: XXL, 成分: 真丝, 价格: ￥99}<br>当前衬衣信息: {品牌: Hodo红豆, 大小: M, 成分: 真丝, 价格: ￥99}<br>当前衬衣信息: {品牌: Hodo红豆, 大小: M, 成分: 涤纶, 价格: ￥149}<br>创建新的品牌衬衣, 品牌为: YOUNGOR雅戈尔<br>当前衬衣信息: {品牌: YOUNGOR雅戈尔, 大小: XXL, 成分: 真丝, 价格: ￥129}<br>当前衬衣信息: {品牌: ROMON罗蒙, 大小: XL, 成分: 涤纶, 价格: ￥199}</p></blockquote><h2 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/flyweight/flyweight01.png?x-oss-process=style/style01" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>应用于系统底层开发，解决系统性能问题。</li><li>系统有大量相似对象，需要缓冲池。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>共享相同或者相似的细粒度对象，减少对象的创建，降低系统内存，提高效率。</li><li>外部状态相对独立，对象可以在不同的环境中被复用。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>读取外部状态使得运行时间变长。</li><li>内部状态与外部状态分离，使得程序的逻辑复杂化。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://zh.wikipedia.org/wiki/%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科-享元模式</a></li><li><a href="https://www.runoob.com/design-pattern/flyweight-pattern.html" target="_blank" rel="noopener">菜鸟教程-享元模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之结构型-适配器模式 (Adapter)</title>
    <link href="https://www.zhaohaihao.com/posts/2020021402.html"/>
    <id>https://www.zhaohaihao.com/posts/2020021402.html</id>
    <published>2020-02-14T08:02:01.000Z</published>
    <updated>2020-04-07T03:30:46.095Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/109-Adapter" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>将一个类的接口转换成客户端期望的另一个接口。</p></blockquote><p>适配器模式可以使原本接口不兼容的类可以一起工作。</p><h1 id="两种模式"><a href="#两种模式" class="headerlink" title="两种模式"></a>两种模式</h1><p>适配器模式有两种模式：</p><ul><li>对象适配器：采用组合方式进行类的委托</li><li>类适配器：采用继承方式</li></ul><h1 id="三种角色"><a href="#三种角色" class="headerlink" title="三种角色"></a>三种角色</h1><ul><li>目标角色(Target)：客户端所期待的接口(也可以是具体类或者抽象类)。</li><li>源角色(Adaptee)：被适配者。已经存在的需要适配的接口或类。</li><li>适配器(Adapter)：将源接口转换成目标接口。只能是具体的类。</li></ul><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>笔者有一台吃灰蛮久的尼康相机。由于笔者的mbp只有Type-C接口，不能直接读取相机的内存卡。为此笔者还特地斥巨资买了个Type-C的扩展坞。</p><p>这里Type-C扩展坞作为内存卡和笔记本之间的适配器，只要将内存卡插入Type-C扩展坞的SD卡接口中，再将扩展坞接入到笔记本的Type-C接口中，我们就可以通过笔记本来读取内存卡中的内容。</p><p>也就是说扩展坞将笔记本的Type-C接口适配成SD卡接口。这样理解的话，SD卡接口即为我们的目标角色，Type-C接口为被适配者(即源角色)，扩展坞为两者之间的适配器。</p><h2 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h2><p>这里先用类适配器的方式来实现下。</p><h3 id="创建源角色"><a href="#创建源角色" class="headerlink" title="创建源角色"></a>创建源角色</h3><p>上述已经分析了，Type-C接口作为我们的源角色，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> TypeC接口类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-14 16:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeCInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * type-C读取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">typeCRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Type-C接口读取..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建目标角色"><a href="#创建目标角色" class="headerlink" title="创建目标角色"></a>创建目标角色</h3><p>创建目标角色，也就是SD卡接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> SD卡接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-14 16:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SDInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sdRead</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建适配器"><a href="#创建适配器" class="headerlink" title="创建适配器"></a>创建适配器</h3><p>这里的适配器即Typc-C扩展坞，继承源角色，实现目标接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Type-C扩展坞</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-14 16:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeCDockStation</span> <span class="keyword">extends</span> <span class="title">TypeCInterface</span> <span class="keyword">implements</span> <span class="title">SDInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sdRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SD卡接口读取..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"扩展坞转换"</span>);</span><br><span class="line">        <span class="keyword">super</span>.typeCRead();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-14 16:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SDInterface sdInterface = <span class="keyword">new</span> TypeCDockStation();</span><br><span class="line">        sdInterface.sdRead();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>SD卡接口读取…<br>扩展坞转换<br>Type-C接口读取…</p></blockquote><h3 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h3><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/adapter/adapter01.png?x-oss-process=style/style01" alt="image.png"></p><h2 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h2><p>再来讲讲对象适配器方式的实现。</p><p>该方式中，目标角色和源角色并未发生改动，和上述类适配器方式中保持一致，这里就不做过多的代码粘贴了。</p><p>主要变化的是适配器类。</p><h3 id="创建适配器-1"><a href="#创建适配器-1" class="headerlink" title="创建适配器"></a>创建适配器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-14 17:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeCDockStation</span> <span class="keyword">implements</span> <span class="title">SDInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TypeCInterface typeCInterface;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TypeCDockStation</span><span class="params">(TypeCInterface typeCInterface)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.typeCInterface = typeCInterface;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sdRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"SD卡接口读取..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"扩展坞转换"</span>);</span><br><span class="line">        typeCInterface.typeCRead();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试类及输出-1"><a href="#测试类及输出-1" class="headerlink" title="测试类及输出"></a>测试类及输出</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-14 16:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TypeCInterface typeCInterface = <span class="keyword">new</span> TypeCInterface();</span><br><span class="line">        SDInterface sdInterface = <span class="keyword">new</span> TypeCDockStation(typeCInterface);</span><br><span class="line">        sdInterface.sdRead();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>SD卡接口读取…<br>扩展坞转换<br>Type-C接口读取…</p></blockquote><h3 id="类结构图-1"><a href="#类结构图-1" class="headerlink" title="类结构图"></a>类结构图</h3><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/adapter/adapter02.png?x-oss-process=style/style01" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>想使用一个已存在的类，但是该类的方法不符合接口需求。</li><li>软件维护过程中，解决不同产品或者厂家功能类似而接口不同的情况。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>提高类的透明性</li><li>复用现有的类</li><li>目标类和适配器类解耦，提高扩展性</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>增加系统的复杂性</li><li>增加系统代码可读难度</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://zh.wikipedia.org/wiki/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科-适配器模式</a></li><li><a href="https://www.runoob.com/design-pattern/adapter-pattern.html" target="_blank" rel="noopener">菜鸟教程-适配器模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之结构型-装饰器模式 (Decorator)</title>
    <link href="https://www.zhaohaihao.com/posts/2020021401.html"/>
    <id>https://www.zhaohaihao.com/posts/2020021401.html</id>
    <published>2020-02-14T01:55:33.000Z</published>
    <updated>2020-04-07T03:30:33.105Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/108-Decorator" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><p>装饰器模式对于笔者来说，印象还是比较深刻的。因为当年笔者考软件设计师的设计模式大题考的就是这个模式，差点阵亡。</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>动态地为一个对象添加一些额外的职责。</p></blockquote><p>在扩展原有对象功能上，装饰器模式比继承的方式更加灵活。</p><h1 id="模式中的角色"><a href="#模式中的角色" class="headerlink" title="模式中的角色"></a>模式中的角色</h1><ul><li>抽象构建(Component)：定义一个抽象接口(可以是抽象类)，用以给对象动态地添加职责。</li><li>具体构建(ConcreteComponent)：定义一个具体的对象，实现Component接口。</li><li>抽象装饰者(Decorator)：继承Component，用有Component的职责，同时也可以扩展职责。</li><li>具体装饰者(ConcretorDecorator)：负责给具体的构建对象添加职责，同时可以定义额外的职责。</li></ul><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>笔者作为一点点的重度爱好者，这里就以奶茶为例。</p><h2 id="创建抽象构建"><a href="#创建抽象构建" class="headerlink" title="创建抽象构建"></a>创建抽象构建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 抽象奶茶类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 23:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractMilkyTea</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">desc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 价格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">price</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建具体构建"><a href="#创建具体构建" class="headerlink" title="创建具体构建"></a>创建具体构建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 具体奶茶类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 23:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MilkyTea</span> <span class="keyword">extends</span> <span class="title">AbstractMilkyTea</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">desc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"奶茶"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建抽象装饰者"><a href="#创建抽象装饰者" class="headerlink" title="创建抽象装饰者"></a>创建抽象装饰者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 抽象装饰者类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 23:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDecorator</span> <span class="keyword">extends</span> <span class="title">AbstractMilkyTea</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AbstractMilkyTea abstractMilkyTea;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractDecorator</span><span class="params">(AbstractMilkyTea abstractMilkyTea)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.abstractMilkyTea = abstractMilkyTea;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">desc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.abstractMilkyTea.desc();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.abstractMilkyTea.price();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里抽象装饰者继承了抽象奶茶类。</p><p>这个时候，具体奶茶类和抽象装饰者类都作为抽象奶茶类的子类。</p><p>我们可以通过具体奶茶类和抽象装饰者类继承的父类(抽象奶茶类)进行组合让这两个子类建立关系。</p><h2 id="创建具体装饰者"><a href="#创建具体装饰者" class="headerlink" title="创建具体装饰者"></a>创建具体装饰者</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 糖装饰者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 23:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SugarDecorator</span> <span class="keyword">extends</span> <span class="title">AbstractDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SugarDecorator</span><span class="params">(AbstractMilkyTea abstractMilkyTea)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(abstractMilkyTea);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">desc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.desc() + <span class="string">" 加糖"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.price() + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 红豆装饰者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-14 00:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedBeanDecorator</span> <span class="keyword">extends</span> <span class="title">AbstractDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedBeanDecorator</span><span class="params">(AbstractMilkyTea abstractMilkyTea)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(abstractMilkyTea);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">desc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.desc() + <span class="string">" 加红豆"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.price() + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 珍珠装饰者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 23:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PearlDecorator</span> <span class="keyword">extends</span> <span class="title">AbstractDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PearlDecorator</span><span class="params">(AbstractMilkyTea abstractMilkyTea)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(abstractMilkyTea);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">desc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.desc() + <span class="string">" 加珍珠"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.price() + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-14 00:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AbstractMilkyTea abstractMilkyTea = <span class="keyword">new</span> MilkyTea();</span><br><span class="line">        abstractMilkyTea = <span class="keyword">new</span> SugarDecorator(abstractMilkyTea);</span><br><span class="line">        abstractMilkyTea = <span class="keyword">new</span> PearlDecorator(abstractMilkyTea);</span><br><span class="line">        System.out.println(abstractMilkyTea.desc() + <span class="string">" 的销售价格是:"</span> + abstractMilkyTea.price());</span><br><span class="line"></span><br><span class="line">        abstractMilkyTea = <span class="keyword">new</span> MilkyTea();</span><br><span class="line">        abstractMilkyTea = <span class="keyword">new</span> RedBeanDecorator(abstractMilkyTea);</span><br><span class="line">        abstractMilkyTea = <span class="keyword">new</span> PearlDecorator(abstractMilkyTea);</span><br><span class="line">        System.out.println(abstractMilkyTea.desc() + <span class="string">" 的销售价格是:"</span> + abstractMilkyTea.price());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类输出的结果如下：</p><blockquote><p>奶茶 加糖 加珍珠 的销售价格是:10<br>奶茶 加红豆 加珍珠 的销售价格是:11</p></blockquote><h2 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/decorator/decorator01.png?x-oss-process=style/style01" alt="image.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>给一个类添加额外的职责</li><li>动态的为一个对象添加功能同时可以动态撤销</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>比继承更加灵活，易扩展。可以在不改变原有对象的情况下给一个对象扩展功能。</li><li>解耦。装饰类和被装饰者可以独立变化，不会相互耦合。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>会导致代码和类的骤增，增加程序复杂性。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://zh.wikipedia.org/wiki/%E4%BF%AE%E9%A5%B0%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科-修饰模式</a></li><li><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener">菜鸟教程-装饰器模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之结构型-外观模式 (Facade)</title>
    <link href="https://www.zhaohaihao.com/posts/2020021302.html"/>
    <id>https://www.zhaohaihao.com/posts/2020021302.html</id>
    <published>2020-02-13T12:55:33.000Z</published>
    <updated>2020-04-07T03:30:41.494Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/107-Facade" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p></blockquote><p>外观模式又叫<strong>门面模式</strong>，是符合迪米特法则的。</p><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>作为一个病人去医院看病，可能需要经过挂号、门诊、划价、取药这几个步骤。</p><p>相对来说过程可能较为繁琐，先来看下代码层面是如何实现的。</p><h2 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 病人类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 16:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Patient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Patient</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建子系统类"><a href="#创建子系统类" class="headerlink" title="创建子系统类"></a>创建子系统类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 挂号类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 16:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegisterService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">(Patient patient)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟挂号</span></span><br><span class="line">        System.out.println(<span class="string">"病人: "</span> + patient.getName() + <span class="string">" 进行挂号"</span>);</span><br><span class="line">        System.out.println(<span class="string">"挂号完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 门诊类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 16:18</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutpatientService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">(Patient patient)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟就诊</span></span><br><span class="line">        System.out.println(<span class="string">"病人: "</span> + patient.getName() + <span class="string">" 进行就诊"</span>);</span><br><span class="line">        System.out.println(<span class="string">"就诊完毕, 需要配药"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 划价类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 16:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SettleAccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">(Patient patient)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟付款</span></span><br><span class="line">        System.out.println(<span class="string">"病人: "</span> + patient.getName() + <span class="string">" 进行付款"</span>);</span><br><span class="line">        System.out.println(<span class="string">"付款完成, 前往取药"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 取药类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 16:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TakeMedicineService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">(Patient patient)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟取药</span></span><br><span class="line">        System.out.println(<span class="string">"病人: "</span> + patient.getName() + <span class="string">" 进行取药"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 16:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Patient patient = <span class="keyword">new</span> Patient(<span class="string">"海豪"</span>);</span><br><span class="line">        System.out.println(<span class="string">"病人进入医院"</span>);</span><br><span class="line">        <span class="keyword">new</span> RegisterService().operate(patient);</span><br><span class="line">        <span class="keyword">new</span> OutpatientService().operate(patient);</span><br><span class="line">        <span class="keyword">new</span> SettleAccountService().operate(patient);</span><br><span class="line">        <span class="keyword">new</span> TakeMedicineService().operate(patient);</span><br><span class="line">        System.out.println(<span class="string">"病人离开医院"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类输出的结果如下：</p><blockquote><p>病人进入医院<br>病人: 海豪 进行挂号<br>挂号完毕<br>病人: 海豪 进行就诊<br>就诊完毕, 需要配药<br>病人: 海豪 进行付款<br>付款完成, 前往取药<br>病人: 海豪 进行取药<br>病人离开医院</p></blockquote><h2 id="类结构图"><a href="#类结构图" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/facade/facade01.png?x-oss-process=style/style01" alt="image.png"></p><p>从类结构图中我们可以发现，客户端对于挂号、门诊、划价、取药这些子系统的依赖性过高。各自子系统代码的变动很可能引起客户端代码变动，从而造成风险。</p><h1 id="方案改进"><a href="#方案改进" class="headerlink" title="方案改进"></a>方案改进</h1><p>我们可以在上述示例中通过建立客户端与子系统间的外观类来松散耦合。</p><p>实体类与子系统类我们不做改动。</p><h2 id="创建接待员类"><a href="#创建接待员类" class="headerlink" title="创建接待员类"></a>创建接待员类</h2><p>这里的接待员实际上就是外观模式中的外观类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 接待员类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 16:46</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receptionist</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟注入</span></span><br><span class="line">    <span class="keyword">private</span> RegisterService registerService = <span class="keyword">new</span> RegisterService();</span><br><span class="line">    <span class="keyword">private</span> OutpatientService outpatientService = <span class="keyword">new</span> OutpatientService();</span><br><span class="line">    <span class="keyword">private</span> SettleAccountService settleAccountService = <span class="keyword">new</span> SettleAccountService();</span><br><span class="line">    <span class="keyword">private</span> TakeMedicineService takeMedicineService = <span class="keyword">new</span> TakeMedicineService();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接待病人</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> patient</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receivePatients</span><span class="params">(Patient patient)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接待员开始接待病人"</span>);</span><br><span class="line">        registerService.operate(patient);</span><br><span class="line">        outpatientService.operate(patient);</span><br><span class="line">        settleAccountService.operate(patient);</span><br><span class="line">        takeMedicineService.operate(patient);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类及输出-1"><a href="#测试类及输出-1" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 16:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Patient patient = <span class="keyword">new</span> Patient(<span class="string">"海豪"</span>);</span><br><span class="line">        Receptionist receptionist = <span class="keyword">new</span> Receptionist();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"病人进入医院"</span>);</span><br><span class="line">        receptionist.receivePatients(patient);</span><br><span class="line">        System.out.println(<span class="string">"病人离开医院"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类输出的结果如下：</p><blockquote><p>病人进入医院<br>接待员开始接待病人<br>病人: 海豪 进行挂号<br>挂号完毕<br>病人: 海豪 进行就诊<br>就诊完毕, 需要配药<br>病人: 海豪 进行付款<br>付款完成, 前往取药<br>病人: 海豪 进行取药<br>病人离开医院</p></blockquote><h2 id="类结构图-1"><a href="#类结构图-1" class="headerlink" title="类结构图"></a>类结构图</h2><p>以上示例类的结构图如下所示<br><img src="https://oss.zhaohaihao.com/photo/design-patterns/facade/facade02.png?x-oss-process=style/style01" alt="image.png"></p><p>我们可以从类图中看出，通过外观模式改动后，客户端与子系统不再有直接的联系，客户端只与外观类进行交互，子系统也只与外观类进行交互。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>子系统越来越复杂，增加外观模式提供简单调用接口</li><li>构建多层系统结构，利用外观对象作为每层的入口，简化层与层之间的调用</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>松散耦合，减少系统间依赖</li><li>简化调用过程操作，提高灵活性</li><li>更好地划分访问层次</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>新增或者扩展子系统行为不符合开闭原则，容易引入风险</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://zh.wikipedia.org/wiki/%E5%A4%96%E8%A7%80%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科-外观模式</a></li><li><a href="https://www.runoob.com/design-pattern/facade-pattern.html" target="_blank" rel="noopener">菜鸟教程-外观模式</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之创建型-原型模式 (Prototype)</title>
    <link href="https://www.zhaohaihao.com/posts/2020021301.html"/>
    <id>https://www.zhaohaihao.com/posts/2020021301.html</id>
    <published>2020-02-13T01:19:50.000Z</published>
    <updated>2020-04-07T03:30:58.726Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/106-Prototype" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p></blockquote><p>原型模式不需要知道任何创建的细节，也不调用构造函数。</p><h1 id="三个基本步骤"><a href="#三个基本步骤" class="headerlink" title="三个基本步骤"></a>三个基本步骤</h1><p>原型模式的核心在于原型类，而满足原型模式的原型类需要进行以下三个步骤：</p><ul><li><strong>实现Cloneable接口。</strong> <code>Cloneable</code> 接口实际上是个空接口(标记接口)。表明只有实现该接口才能够被复制，否则在运行的时候会抛出 <code>CloneNotSupportedException</code> 异常。</li><li><strong>重写Object类中的clone方法。</strong> <code>Object</code> 类作为顶级父类，其内部包含一个 <code>clone()</code> 方法，用来返回对象的一个拷贝。</li><li><strong>在clone()方法中调用super.clone()。</strong></li></ul><h1 id="场景示例"><a href="#场景示例" class="headerlink" title="场景示例"></a>场景示例</h1><p>笔者这里以改简历为例子。绝大多数读者应该和笔者一样将原来的简历拷贝一份，然后在拷贝的简历上进行修改。</p><h2 id="创建简历类"><a href="#创建简历类" class="headerlink" title="创建简历类"></a>创建简历类</h2><p>这里简历类作为原型类，需要实现 <code>Cloneable</code> 接口的，同时重写 <code>clone()</code> 方法，并在 <code>clone()</code> 方法内部调用 <code>super.clone()</code> 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 简历类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 00:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resume</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生日</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 性别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 学校</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工龄</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String socialWorkAge;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公司</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String company;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作描述</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String workDescription;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Resume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Resume类的无参构造函数"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处省略 getter、setter方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始克隆简历"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(String.format(<span class="string">"姓名: %s"</span>, name));</span><br><span class="line">        System.out.println(String.format(<span class="string">"生日: %s, 性别: %s, 毕业院校: %s, 工龄: %s"</span>, birthday, sex, school, socialWorkAge));</span><br><span class="line">        System.out.println(String.format(<span class="string">"公司: %s, 工作描述: %s"</span>, company, workDescription));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试类及输出"><a href="#测试类及输出" class="headerlink" title="测试类及输出"></a>测试类及输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 00:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 原版简历</span></span><br><span class="line">        Resume resumeA = <span class="keyword">new</span> Resume();</span><br><span class="line">        resumeA.setName(<span class="string">"海豪"</span>);</span><br><span class="line">        resumeA.setBirthday(<span class="keyword">new</span> Date(<span class="number">94</span>, <span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">        resumeA.setSex(<span class="string">"男"</span>);</span><br><span class="line">        resumeA.setSchool(<span class="string">"XXXX大学"</span>);</span><br><span class="line">        resumeA.setSocialWorkAge(<span class="string">"1"</span>);</span><br><span class="line">        resumeA.setCompany(<span class="string">"A科技有限公司"</span>);</span><br><span class="line">        resumeA.setWorkDescription(<span class="string">"在A公司的工作描述"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拷贝简历改版</span></span><br><span class="line">        Resume resumeB = (Resume) resumeA.clone();</span><br><span class="line">        resumeB.setSocialWorkAge(<span class="string">"3"</span>);</span><br><span class="line">        resumeB.setCompany(<span class="string">"B科技有限公司"</span>);</span><br><span class="line">        resumeB.setWorkDescription(<span class="string">"在B公司的工作描述"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====简历修改前====="</span>);</span><br><span class="line">        resumeA.display();</span><br><span class="line">        System.out.println(<span class="string">"=====简历修改后====="</span>);</span><br><span class="line">        resumeB.display();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"是否为同一对象: "</span> + (resumeA == resumeB));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>Resume类的无参构造函数<br>开始克隆简历<br>=====简历修改前=====<br>姓名: 海豪<br>生日: Sat Jan 01 00:00:00 CST 1994, 性别: 男, 毕业院校: XXXX大学, 工龄: 1<br>公司: A科技有限公司, 工作描述: 在A公司的工作描述<br>=====简历修改后=====<br>姓名: 海豪<br>生日: Sat Jan 01 00:00:00 CST 1994, 性别: 男, 毕业院校: XXXX大学, 工龄: 3<br>公司: B科技有限公司, 工作描述: 在B公司的工作描述<br>是否为同一对象: false</p></blockquote><p>从测试类的输出结果中我们可以看到：</p><ul><li>克隆的时候并没有调用类的构造器</li><li>克隆后的对象是一个新的对象</li></ul><h1 id="知识扩展"><a href="#知识扩展" class="headerlink" title="知识扩展"></a>知识扩展</h1><p>说到克隆，就不得不说下<strong>深克隆(深拷贝)</strong>与<strong>浅克隆(浅拷贝)</strong>。</p><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>先来看下深克隆与浅克隆各自的定义：</p><ul><li><strong>深克隆：</strong>被复制的对象所有的变量都含有与原来对象相同的值，所有的对其他对象的引用也都指向复制过的新对象。换句话也就是说，深克隆不仅拷贝对象本身(包括对象中的基本变量)，而且也拷贝对象包含的引用指向的所有对象。</li><li><strong>浅克隆：</strong>被复制的对象所有的变量都含有与原来对象相同的值，所有的对其他对象的引用都仍然指向原来的对象。换句话也就是说，浅克隆拷贝对象时仅拷贝对象本身(包括对象中的基本变量)，不拷贝对象包含的引用指向的对象。</li></ul><h2 id="图解定义"><a href="#图解定义" class="headerlink" title="图解定义"></a>图解定义</h2><p><img src="https://oss.zhaohaihao.com/photo/design-patterns/prototype/prototype01.png?x-oss-process=style/style01" alt="image.png"><br><img src="https://oss.zhaohaihao.com/photo/design-patterns/prototype/prototype02.png?x-oss-process=style/style01" alt="image.png"></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>我们对上述场景示例中的简历类做一个测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 测试类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 00:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 原版简历</span></span><br><span class="line">        Resume resumeA = <span class="keyword">new</span> Resume();</span><br><span class="line">        resumeA.setName(<span class="string">"海豪"</span>);</span><br><span class="line">        resumeA.setBirthday(<span class="keyword">new</span> Date(<span class="number">94</span>, <span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">        resumeA.setSex(<span class="string">"男"</span>);</span><br><span class="line">        resumeA.setSchool(<span class="string">"XXXX大学"</span>);</span><br><span class="line">        resumeA.setSocialWorkAge(<span class="string">"1"</span>);</span><br><span class="line">        resumeA.setCompany(<span class="string">"A科技有限公司"</span>);</span><br><span class="line">        resumeA.setWorkDescription(<span class="string">"在A公司的工作描述"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拷贝简历</span></span><br><span class="line">        Resume resumeB = (Resume) resumeA.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=====原版简历====="</span>);</span><br><span class="line">        resumeA.display();</span><br><span class="line">        System.out.println(<span class="string">"=====拷贝简历====="</span>);</span><br><span class="line">        resumeB.display();</span><br><span class="line"></span><br><span class="line">        resumeA.getBirthday().setDate(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">"=====修改后原版简历====="</span>);</span><br><span class="line">        resumeA.display();</span><br><span class="line">        System.out.println(<span class="string">"=====修改后拷贝简历====="</span>);</span><br><span class="line">        resumeB.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类的输出结果如下：</p><blockquote><p>Resume类的无参构造函数<br>开始克隆简历<br>=====原版简历=====<br>姓名: 海豪<br>生日: Sat Jan 01 00:00:00 CST 1994, 性别: 男, 毕业院校: XXXX大学, 工龄: 1<br>公司: A科技有限公司, 工作描述: 在A公司的工作描述<br>=====拷贝简历=====<br>姓名: 海豪<br>生日: Sat Jan 01 00:00:00 CST 1994, 性别: 男, 毕业院校: XXXX大学, 工龄: 1<br>公司: A科技有限公司, 工作描述: 在A公司的工作描述</p><p>=====修改后原版简历=====<br>姓名: 海豪<br>生日: Wed Jan 05 00:00:00 CST 1994, 性别: 男, 毕业院校: XXXX大学, 工龄: 1<br>公司: A科技有限公司, 工作描述: 在A公司的工作描述<br>=====修改后拷贝简历=====<br>姓名: 海豪<br>生日: Wed Jan 05 00:00:00 CST 1994, 性别: 男, 毕业院校: XXXX大学, 工龄: 1<br>公司: A科技有限公司, 工作描述: 在A公司的工作描述</p></blockquote><p>我们可以看到，在测试类中我们只修改了原版简历的生日，但是输出的结果当中拷贝简历的生日也跟着发生了变化。</p><p>上述即为浅克隆，其并不拷贝生日变量引用指向的日期对象，与原对象共享日期对象。</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>那么我们如何来实现深克隆？</p><p>其实方法很简单，大体上代码与浅克隆类似，主要的差别在于 <code>clone()</code> 方法。下段改进代码省略了其余方法，主要来看下 <code>clone()</code> 方法的变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 简历类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-13 00:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resume</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略其他方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始克隆简历"</span>);</span><br><span class="line">        Resume resume = (Resume) <span class="keyword">super</span>.clone();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 深克隆</span></span><br><span class="line">        resume.birthday = (Date) resume.birthday.clone();</span><br><span class="line">        <span class="keyword">return</span> resume;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时再用示例的测试类进行测试的结果如下：</p><blockquote><p>Resume类的无参构造函数<br>开始克隆简历<br>=====原版简历=====<br>姓名: 海豪<br>生日: Sat Jan 01 00:00:00 CST 1994, 性别: 男, 毕业院校: XXXX大学, 工龄: 1<br>公司: A科技有限公司, 工作描述: 在A公司的工作描述<br>=====拷贝简历=====<br>姓名: 海豪<br>生日: Sat Jan 01 00:00:00 CST 1994, 性别: 男, 毕业院校: XXXX大学, 工龄: 1<br>公司: A科技有限公司, 工作描述: 在A公司的工作描述</p><p>=====修改后原版简历=====<br>姓名: 海豪<br>生日: Wed Jan 05 00:00:00 CST 1994, 性别: 男, 毕业院校: XXXX大学, 工龄: 1<br>公司: A科技有限公司, 工作描述: 在A公司的工作描述<br>=====修改后拷贝简历=====<br>姓名: 海豪<br>生日: Sat Jan 01 00:00:00 CST 1994, 性别: 男, 毕业院校: XXXX大学, 工龄: 1<br>公司: A科技有限公司, 工作描述: 在A公司的工作描述</p></blockquote><p>我们可以看到，在修改了原版简历的生日后，拷贝简历的生日并未发生改变。这也说明经过深克隆后，两者的日期引用并不是引用同一个对象。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>类初始化需要消耗较多的资源</li><li>new产生的一个对象需要非常繁琐的过程(数据准备、访问权限等)</li><li>构造函数比较复杂</li><li>循环体中生产大量对象时</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>性能提高。原型模式性能比直接new一个对象的性能高。</li><li>摆脱构造函数的约束，简化创建的过程</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>必须配备克隆方法</li><li>对克隆复杂对象或者对克隆出的对象进行复杂改造时，容易引入风险</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li><a href="https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科-原型模式</a></li><li><a href="https://www.runoob.com/design-pattern/prototype-pattern.html" target="_blank" rel="noopener">菜鸟教程-原型模式</a></li><li><a href="https://blog.csdn.net/lovezhaohaimig/article/details/80372233" target="_blank" rel="noopener">彻底理解Java深克隆和浅克隆的原理及实现</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之创建型-单例模式 (Singleton)</title>
    <link href="https://www.zhaohaihao.com/posts/2020021201.html"/>
    <id>https://www.zhaohaihao.com/posts/2020021201.html</id>
    <published>2020-02-12T06:11:55.000Z</published>
    <updated>2020-04-07T03:31:16.136Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://emojipedia.org/backhand-index-pointing-right/" target="_blank" rel="noopener">👉</a><a href="https://github.com/zhaohaihao/java-design-patterns/tree/master/105-Singleton" target="_blank" rel="noopener"><strong>文章示例代码</strong></a><a href="https://emojipedia.org/backhand-index-pointing-left/" target="_blank" rel="noopener">👈</a></p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><blockquote><p>保证一个类有且仅有一个实例，并且提供一个可以访问它的全局访问点。</p></blockquote><h1 id="三个基本步骤"><a href="#三个基本步骤" class="headerlink" title="三个基本步骤"></a>三个基本步骤</h1><p>实现单例模式有三个基本的步骤：</p><ol><li>私有构造方法用来限制外部类对其直接实例化</li><li>提供一个私有静态当前类的对象作为变量</li><li>提供一个公有静态方法返回类的实例</li></ol><h1 id="实现单例模式的几种方式"><a href="#实现单例模式的几种方式" class="headerlink" title="实现单例模式的几种方式"></a>实现单例模式的几种方式</h1><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>懒汉式单例模式在类创建的时候不会创建实例，因此类的加载速度比较快。</p><p>懒汉式单例模式在第一次调用的时候才进行初始化，这样做避免了内存的浪费。 </p><p>使用懒汉式方法创建的 <code>LazySingleton</code> 类实例代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 单例模式-懒汉式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-11 19:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式其实是线程不安全的。</p><p>在单线程环境下，这种方式可以很好地进行处理。但是在多线程的环境下，这种方式就会出现问题。</p><p>假设现在有两个线程，一个线程A，另一个线程B。当线程A到达 <code>instance = new LazySingleton();</code> 这一行但没有执行这一行的同时，线程B到达了 <code>if (instance == null)</code> 这个判断。此时由于线程A还未执行当前行，线程B的判断结果为 <code>true</code> ，所以线程B依旧可以执行 <code>instance = new LazySingleton();</code> 这一行语句。此时这两个线程会获得单例类 <code>LazySingleton</code> 的两个不同实例，从而进一步破坏了单例模式。</p><h3 id="改进方式一-加同步锁"><a href="#改进方式一-加同步锁" class="headerlink" title="改进方式一 (加同步锁)"></a>改进方式一 (加同步锁)</h3><p>在 <code>getInstance()</code> 方法上添加 <code>synchronized</code> 关键字，使得当前的方法变成同步方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 单例模式-懒汉式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-11 19:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>synchronized</code> 加在静态方法上，相当于锁的是当前类的class文件。</p><h3 id="改进方式二-加同步锁"><a href="#改进方式二-加同步锁" class="headerlink" title="改进方式二 (加同步锁)"></a>改进方式二 (加同步锁)</h3><p>在 <code>getInstance()</code> 方法中添加 <code>synchronized</code> 块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 单例模式-懒汉式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-11 19:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (LazySingleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式和上述改进方式一的效果实际上是一样的。</p><p>在多线程资源共享当中，使用 <code>synchronized</code> 同步锁的方式，其实就是以<strong>时间换空间</strong>的方式。</p><h2 id="双重检查懒汉式"><a href="#双重检查懒汉式" class="headerlink" title="双重检查懒汉式"></a>双重检查懒汉式</h2><p>同步锁是比较消耗资源的，会存在加锁和解锁的开销。而且上述两改进方式 <code>synchronized</code> 锁的是class文件，锁的粒度范围较大。</p><p>为了兼顾性能和线程安全，使用双重检查的方式来改进懒汉式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 单例模式-懒汉式(双重检查)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-11 19:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazySingleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外层 <code>if (instance == null)</code> 不加锁，如果不满足则程序直接返回，如果满足则也只会有一个线程进入到 <code>synchronized</code> 当中。大幅度地降低了将 <code>synchronized</code> 加在方法上时带来的性能开销。</p><p>但是目前这种方式依旧存在隐患。主要原因在于外层 <code>if (instance == null)</code> 分支判断和 <code>instance = new LazySingleton()</code> 语句这两处。</p><p>外层 <code>if (instance == null)</code> 在进行分支判断的时候， <code>instance</code> 对象有可能是不为空的，虽然不为空，但是很有可能 <code>instance</code> 这个对象还未完成初始化，也就是说我们的 <code>instance = new LazySingleton()</code> 语句还没有执行完成。</p><p><strong>Q：如何理解？</strong></p><hr><p>我们可以先来看下 <code>instance = new LazySingleton()</code> 这语句。虽然看似简单的一行语句，但是在程序中这条语句实际上进行了三个操作：</p><ol><li>给当前对象分配内存</li><li>初始化对象</li><li>设置变量 <code>instance</code> 指向刚分配的内存地址</li></ol><p>在程序执行的过程当中，JVM有可能会发生<strong>指令重排序</strong>。比如发生指令重排序后当前语句的执行顺序变为132，即先给对象分配内存地址，然后将变量指向刚分配的内存地址，最后再进行对象的初始化操作。</p><p>上述操作在单线程环境下也没什么大问题。然后我们再来看看，在多线程环境下，当前程序存在隐患的可能。</p><table><thead><tr><th align="center">时间线</th><th align="center">线程A</th><th align="center">线程B</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">给当前对象分配内存</td><td align="center"></td></tr><tr><td align="center">2</td><td align="center">设置变量 <code>instance</code> 指向刚分配的内存地址</td><td align="center"></td></tr><tr><td align="center">3</td><td align="center"></td><td align="center">外层分支判断 <code>instance</code> 是否为null</td></tr><tr><td align="center">4</td><td align="center"></td><td align="center">初次访问对象</td></tr><tr><td align="center">5</td><td align="center">初始化对象</td><td align="center"></td></tr><tr><td align="center">6</td><td align="center">初次访问对象</td><td align="center"></td></tr></tbody></table><p>按照时间线的推移，我们可以从表格中看到在时间线4中线程B访问的对象是线程A中还未初始化完成的对象，这个时候就有可能发生异常。</p><p>这里实际上有两种方式可以解决以上问题：</p><ul><li>防止指令重排序</li><li>让其余的线程无法观察到当前线程的指令重排序</li></ul><p><strong>Q：如何避免指令重排序？</strong></p><hr><p>使用 <code>volatile</code> 关键字来声明 <code>instance</code> 变量，这样的话重排序就会被禁止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> LazySingleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazySingleton<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CPU也有共享内存。在加了 <code>volatile</code> 关键字之后，所有的线程都能观察到共享内存的最新状态，保证了内存的可见性。</p><h2 id="静态内部类模式"><a href="#静态内部类模式" class="headerlink" title="静态内部类模式"></a>静态内部类模式</h2><p>这种方式，其实就是让其余的线程无法观察到当前线程的指令重排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 静态内部类单例模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-12 01:36</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerClassSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> StaticInnerClassSingleton instance = <span class="keyword">new</span> StaticInnerClassSingleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticInnerClassSingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInnerClassSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JVM在类的初始化阶段(即Class在被类加载器加载之后，在被线程使用之前这一期间)会去执行类的初始化。</p><p>在类的初始化期间，JVM会去获取Class对象的初始化锁(同步多个线程对一个类的初始化)。</p><p>初始化一个类，包括执行类的静态初始化，初始化类中声明的静态变量。<br>根据Java语言规范主要有五种情况在首次发生时，一个类(包括接口)将被立刻初始化。以 <code>Clazz</code> 类为例：</p><ul><li>有一个 <code>Clazz</code> 类型的实例被创建</li><li><code>Clazz</code> 类中声明的一个静态方法被调用</li><li><code>Clazz</code> 类中声明的一个静态成员被赋值</li><li><code>Clazz</code> 类中的静态成员被使用，并且这个成员不是一个常量成员</li><li><code>Clazz</code> 类是一个顶级类，并且 <code>Clazz</code> 类中有嵌套的断言语句</li></ul><p>通过改动双重检查懒汉式中线程A和线程B的流程，我们得到下图。</p><p><img src="https://oss.zhaohaihao.com/photo/design-patterns/singleton/singleton01.png?x-oss-process=style/style01" alt=""><br>通过上图，我们可以分析下：当线程A和线程B尝试获取 <code>Class</code> 对象的初始化锁，假设线程A获取到了这个锁，此时线程A执行静态内部类的初始化操作。由于 <code>Class</code> 对象初始化锁的存在，线程B是无法看到类初始化操作中的指令重排序的。</p><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p>饿汉式单例模式正好与懒汉式单例模式相反。</p><p>饿汉式单例模式在类加载的时候就完成了初始化操作，避免了线程同步的问题。所以类在加载的时候比较缓慢，而在运行时获取对象的速度相对较快。 </p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 单例模式-饿汉式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-12 12:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HungrySingleton instance = <span class="keyword">new</span> HungrySingleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>饿汉式单例模式的问题就在于类在加载的时候就进行初始化操作，没有达到懒加载的效果。如果类从始至终都未曾使用过，那么就造成了资源的浪费。 </p><p>当然也可以把对象实例化的过程放入到静态块当中，效果也是一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 单例模式-饿汉式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-12 12:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungrySingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HungrySingleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> HungrySingleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungrySingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungrySingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举模式"><a href="#枚举模式" class="headerlink" title="枚举模式"></a>枚举模式</h2><p>枚举方式是《Effective Java》作者Josh Bloch推荐的方式。</p><p>这种方式不仅能避免多线程同步的问题，而且还能防止序列化和反射破坏单例创建新的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 枚举单例模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-12 16:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumSingleton &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"任何其他方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 枚举单例模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-12 16:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumSingleton &#123;</span><br><span class="line">    INSTANCE &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"任何其他方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上的两种方式均可，效果一样。</p><h2 id="容器单例"><a href="#容器单例" class="headerlink" title="容器单例"></a>容器单例</h2><p>这种单例模式和享元模式有点类似。利用容器来管理多个单例对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 容器单例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-12 16:28</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ContainerSingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putInstance</span><span class="params">(String key, Object instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(key) &amp;&amp; instance != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!map.containsKey(key)) &#123;</span><br><span class="line">                map.put(key, instance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getInstance</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式比较适合程序在初始化期间多个单例存放至容器进行统一管理，使用时通过键值从容器中获取单例对象。</p><p>这里的容器使用的是 <code>HashMap</code> ，很显然是线程不安全的。但是对上述用例(程序在初始化期间多个单例存放至容器进行统一管理，使用时通过键值从容器中获取单例对象)这样使用也是可以的。</p><p>为了线程安全，我们可以改用 <code>HashTable</code> 。但是 <code>HashTable</code> 会影响性能，在频繁地存取时都会有同步锁。也可以考虑使用 <code>ConcurrentHashMap</code> 。</p><h2 id="ThreadLocal线程单例"><a href="#ThreadLocal线程单例" class="headerlink" title="ThreadLocal线程单例"></a>ThreadLocal线程单例</h2><p>这种方式产生的单例并不能保证在整个应用中全局唯一，但是它可以保证在同个线程当中唯一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zhh</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> ThreadLocal线程单例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-02-12 17:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ThreadLocalSingleton&gt; THREAD_LOCAL = <span class="keyword">new</span> ThreadLocal&lt;ThreadLocalSingleton&gt;() &#123;</span><br><span class="line">        <span class="comment">// 重写初始化方法</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> ThreadLocalSingleton <span class="title">initialValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ThreadLocalSingleton();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ThreadLocalSingleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ThreadLocalSingleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> THREAD_LOCAL.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ThreadLocal</code> 会为每个线程提供一个独立的变量副本。<code>ThreadLocal</code> 是基于 <code>ThreadLocalMap</code> 这个类来实现的，它维持了线程间的隔离。当调用 <code>ThreadLocal</code> 的 <code>get()</code> 方法时，我们不用指定键值，默认走的就是 <code>ThreadLocalMap</code> 。</p><p><code>ThreadLocal</code> 隔离了多个线程对数据访问的冲突。在多线程资源共享当中，使用 <code>ThreadLocal</code> 的方式，其实就是以<strong>空间换时间</strong>的方式。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h2><ul><li>在应用场景中，某类只要求生成一个实例的时候。例如一个班中的班长、每个人的身份证号等。</li><li>当对象需要被共享的场合。由于单例模式只允许创建一个对象，共享该对象可以节省内存，并且加快对象访问速度。例如Web中的配置对象、数据库的连接池等。</li><li>当某类需要频繁进行实例化操作，而创建的对象又频繁被销毁的时候。例如多线程的线程池、网络连接池等。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul><li>在内存中只存在一个实例，减少了内存开销。</li><li>避免对共享资源的多重占用。</li><li>设置全局访问点，严格控制访问。</li></ul><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul><li>没有抽象层，扩展困难。</li><li>单例类的职责过重，在一定程度上违背了“单一职责原则”。 </li><li>不适用于变化的对象，如果同一类型的对象总是要在不同的用例场景发生变化，单例就会引起数据的错误，不能保存彼此的状态。 </li><li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。 </li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li>《Head First 设计模式》</li><li>《大话设计模式》</li><li>《Effective Java》</li><li><a href="https://zh.wikipedia.org/wiki/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">维基百科-单例模式</a></li><li><a href="https://book.51cto.com/art/201511/498717.htm?pc" target="_blank" rel="noopener">使用容器实现单例模式</a></li><li><a href="https://www.jianshu.com/p/6521ccac486d" target="_blank" rel="noopener">容器单例和ThreadLocal单例</a></li><li><a href="https://blog.csdn.net/wu2374633583/article/details/80880203" target="_blank" rel="noopener">多线程之ThreadLocal单例模式</a></li><li><a href="https://blog.csdn.net/yejingtao703/article/details/78806902" target="_blank" rel="noopener">ThreadLocal-单例模式下高并发线程安全</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://emojipedia.org/backhand-index-pointing-right/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;👉&lt;/a&gt;&lt;a href=&quot;https://github.com/zhaohaih
      
    
    </summary>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.zhaohaihao.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
